{"list":[{"title":"AbrController#getBitrateList","link":"<a href=\"AbrController.html#getBitrateList\">getBitrateList</a>"},{"title":"AbrController#getInitialBitrateFor","link":"<a href=\"AbrController.html#getInitialBitrateFor\">getInitialBitrateFor</a>","description":"<p>Returns the initial bitrate for a specific media type and stream id</p>"},{"title":"AbrController#getQualityForBitrate","link":"<a href=\"AbrController.html#getQualityForBitrate\">getQualityForBitrate</a>"},{"title":"AbrController~_checkCmsdMaxBitrate","link":"<a href=\"AbrController.html#~_checkCmsdMaxBitrate\">_checkCmsdMaxBitrate</a>","description":"<p>Returns the maximum possible index from CMSD model</p>"},{"title":"AbrController~_checkMaxBitrate","link":"<a href=\"AbrController.html#~_checkMaxBitrate\">_checkMaxBitrate</a>","description":"<p>Returns the maximum possible index</p>"},{"title":"AbrController~_getMaxIndexBasedOnBitrateFor","link":"<a href=\"AbrController.html#~_getMaxIndexBasedOnBitrateFor\">_getMaxIndexBasedOnBitrateFor</a>","description":"<p>Returns the maximum allowed index.</p>"},{"title":"AbrController~_getMinIndexBasedOnBitrateFor","link":"<a href=\"AbrController.html#~_getMinIndexBasedOnBitrateFor\">_getMinIndexBasedOnBitrateFor</a>","description":"<p>Returns the minimum allowed index.</p>"},{"title":"AbrController~checkPlaybackQuality","link":"<a href=\"AbrController.html#~checkPlaybackQuality\">checkPlaybackQuality</a>","description":"<p>This function is called by the scheduleControllers to check if the quality should be changed.<br>\nConsider this the main entry point for the ABR decision logic</p>"},{"title":"AbrController~getAbandonmentStateFor","link":"<a href=\"AbrController.html#~getAbandonmentStateFor\">getAbandonmentStateFor</a>"},{"title":"AbrController~getMaxAllowedIndexFor","link":"<a href=\"AbrController.html#~getMaxAllowedIndexFor\">getMaxAllowedIndexFor</a>","description":"<p>Returns the highest possible index taking limitations like maxBitrate, representationRatio and portal size into account.</p>"},{"title":"AbrController~getMinAllowedIndexFor","link":"<a href=\"AbrController.html#~getMinAllowedIndexFor\">getMinAllowedIndexFor</a>","description":"<p>Returns the minimum allowed index. We consider thresholds defined in the settings, i.e. minBitrate for the corresponding media type.</p>"},{"title":"AbrController~getQualityFor","link":"<a href=\"AbrController.html#~getQualityFor\">getQualityFor</a>","description":"<p>Returns the current quality for a specific media type and a specific streamId</p>"},{"title":"AbrController~getTopBitrateInfoFor","link":"<a href=\"AbrController.html#~getTopBitrateInfoFor\">getTopBitrateInfoFor</a>","description":"<p>Gets top BitrateInfo for the player</p>"},{"title":"AbrController~initialize","link":"<a href=\"AbrController.html#~initialize\">initialize</a>","description":"<p>Initialize everything that is not Stream specific. We only have one instance of the ABR Controller for all periods.</p>"},{"title":"AbrController~registerStreamType","link":"<a href=\"AbrController.html#~registerStreamType\">registerStreamType</a>","description":"<p>Whenever a StreamProcessor is created it is added to the list of streamProcessorDict<br>\nIn addition, the corresponding objects for this object and its stream id are created</p>"},{"title":"AbrController~setPlaybackQuality","link":"<a href=\"AbrController.html#~setPlaybackQuality\">setPlaybackQuality</a>","description":"<p>Sets the new playback quality. Starts from index 0.<br>\nIf the index of the new quality is the same as the old one changeQuality will not be called.</p>"},{"title":"ABRRulesCollection~getMinSwitchRequest","link":"<a href=\"ABRRulesCollection.html#~getMinSwitchRequest\">getMinSwitchRequest</a>"},{"title":"BoxParser#findLastTopIsoBoxCompleted","link":"<a href=\"BoxParser.html#findLastTopIsoBoxCompleted\">findLastTopIsoBoxCompleted</a>","description":"<p>From the list of type boxes to look for, returns the latest one that is fully completed (header + payload). This<br>\nmethod only looks into the list of top boxes and doesn't analyze nested boxes.</p>"},{"title":"BoxParser#parse","link":"<a href=\"BoxParser.html#parse\">parse</a>"},{"title":"BoxParser~parsePayload","link":"<a href=\"BoxParser.html#~parsePayload\">parsePayload</a>","description":"<p>Real-time parsing (whenever data is loaded in the buffer payload) of the payload to capture the moof of a chunk</p>"},{"title":"BufferController~_onMediaFragmentLoaded","link":"<a href=\"BufferController.html#~_onMediaFragmentLoaded\">_onMediaFragmentLoaded</a>","description":"<p>Calls the _appendToBuffer function to append the segment to the buffer. In case of a track switch the buffer might be cleared.</p>"},{"title":"BufferController~appendInitSegmentFromCache","link":"<a href=\"BufferController.html#~appendInitSegmentFromCache\">appendInitSegmentFromCache</a>","description":"<p>Append the init segment for a certain representation to the buffer. If the init segment is cached we take the one from the cache. Otherwise the function returns false and the segment has to be requested again.</p>"},{"title":"BufferController~createBufferSink","link":"<a href=\"BufferController.html#~createBufferSink\">createBufferSink</a>","description":"<p>Creates a SourceBufferSink object</p>"},{"title":"BufferController~getBufferControllerType","link":"<a href=\"BufferController.html#~getBufferControllerType\">getBufferControllerType</a>","description":"<p>Returns the type of the BufferController. We distinguish between standard buffer controllers and buffer controllers related to texttracks.</p>"},{"title":"BufferController~getContinuousBufferTimeForTargetTime","link":"<a href=\"BufferController.html#~getContinuousBufferTimeForTargetTime\">getContinuousBufferTimeForTargetTime</a>","description":"<p>This function returns the maximum time for which the buffer is continuous starting from a target time.<br>\nAs soon as there is a gap we return the time before the gap starts</p>"},{"title":"BufferController~getStreamId","link":"<a href=\"BufferController.html#~getStreamId\">getStreamId</a>","description":"<p>Returns the stream id</p>"},{"title":"BufferController~getType","link":"<a href=\"BufferController.html#~getType\">getType</a>","description":"<p>Returns the media type</p>"},{"title":"BufferController~initialize","link":"<a href=\"BufferController.html#~initialize\">initialize</a>","description":"<p>Initialize the BufferController. Sets the media source and registers the event handlers.</p>"},{"title":"BufferController~setMediaSource","link":"<a href=\"BufferController.html#~setMediaSource\">setMediaSource</a>","description":"<p>Sets the mediasource.</p>"},{"title":"BufferLevel#level","link":"<a href=\"BufferLevel.html#level\">level</a>","description":"<p>Level of the buffer in milliseconds. Indicates the playout duration for which<br>\nmedia data of all active media components is available starting from the<br>\ncurrent playout time.</p>"},{"title":"BufferLevel#t","link":"<a href=\"BufferLevel.html#t\">t</a>","description":"<p>Real-Time | Time of the measurement of the buffer level.</p>"},{"title":"BufferState#state","link":"<a href=\"BufferState.html#state\">state</a>","description":"<p>Current buffer state. Will be MetricsConstants.BUFFER_EMPTY or MetricsConstants.BUFFER_LOADED.</p>"},{"title":"BufferState#target","link":"<a href=\"BufferState.html#target\">target</a>","description":"<p>The Buffer Level Target determined by the BufferLevelRule.</p>"},{"title":"Capabilities~codecRootCompatibleWithCodec","link":"<a href=\"Capabilities.html#~codecRootCompatibleWithCodec\">codecRootCompatibleWithCodec</a>","description":"<p>Check if the root of the old codec is the same as the new one, or if it's declared as compatible in the compat table</p>"},{"title":"Capabilities~setEncryptedMediaSupported","link":"<a href=\"Capabilities.html#~setEncryptedMediaSupported\">setEncryptedMediaSupported</a>"},{"title":"Capabilities~supportsCodec","link":"<a href=\"Capabilities.html#~supportsCodec\">supportsCodec</a>","description":"<p>Check if a codec is supported by the MediaSource. We use the MediaCapabilities API or the MSE to check.</p>"},{"title":"Capabilities~supportsEncryptedMedia","link":"<a href=\"Capabilities.html#~supportsEncryptedMedia\">supportsEncryptedMedia</a>","description":"<p>Returns whether Encrypted Media Extensions are supported on this<br>\nuser agent</p>"},{"title":"Capabilities~supportsEssentialProperty","link":"<a href=\"Capabilities.html#~supportsEssentialProperty\">supportsEssentialProperty</a>","description":"<p>Check if a specific EssentialProperty is supported</p>"},{"title":"CatchupController~_shouldStartCatchUp","link":"<a href=\"CatchupController.html#~_shouldStartCatchUp\">_shouldStartCatchUp</a>","description":"<p>Checks whether the catchup mechanism should be enabled. We use different subfunctions here depending on the catchup mode.</p>"},{"title":"CatchupController~_startPlaybackCatchUp","link":"<a href=\"CatchupController.html#~_startPlaybackCatchUp\">_startPlaybackCatchUp</a>","description":"<p>Apply catchup mode. We either seek back to the target live edge or increase the playback rate.</p>"},{"title":"ClearKeyKeySet#toJWK","link":"<a href=\"ClearKeyKeySet.html#toJWK\">toJWK</a>","description":"<p>Convert this key set to its JSON Web Key (JWK) representation</p>"},{"title":"CommonEncryption.findCencContentProtection","link":"<a href=\"CommonEncryption.html#.findCencContentProtection\">findCencContentProtection</a>","description":"<p>Find and return the ContentProtection element in the given array<br>\nthat indicates support for MPEG Common Encryption</p>"},{"title":"CommonEncryption.getPSSHData","link":"<a href=\"CommonEncryption.html#.getPSSHData\">getPSSHData</a>","description":"<p>Returns just the data portion of a single PSSH</p>"},{"title":"CommonEncryption.getPSSHForKeySystem","link":"<a href=\"CommonEncryption.html#.getPSSHForKeySystem\">getPSSHForKeySystem</a>","description":"<p>Returns the PSSH associated with the given key system from the concatenated<br>\nlist of PSSH boxes in the given initData</p>"},{"title":"CommonEncryption.parseInitDataFromContentProtection","link":"<a href=\"CommonEncryption.html#.parseInitDataFromContentProtection\">parseInitDataFromContentProtection</a>","description":"<p>Parse a standard common encryption PSSH which contains a simple<br>\nbase64-encoding of the init data</p>"},{"title":"CommonEncryption.parsePSSHList","link":"<a href=\"CommonEncryption.html#.parsePSSHList\">parsePSSHList</a>","description":"<p>Parses list of PSSH boxes into keysystem-specific PSSH data</p>"},{"title":"Constants#ABR_FETCH_THROUGHPUT_CALCULATION_AAST","link":"<a href=\"Constants.html#ABR_FETCH_THROUGHPUT_CALCULATION_AAST\">ABR_FETCH_THROUGHPUT_CALCULATION_AAST</a>","description":"<p>Throughput calculation based on adjusted availability start time in low latency mode</p>"},{"title":"Constants#ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","link":"<a href=\"Constants.html#ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING\">ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING</a>","description":"<p>Throughput calculation based on moof parsing</p>"},{"title":"Constants#ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA","link":"<a href=\"Constants.html#ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA\">ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA</a>","description":"<p>Throughput calculation based on downloaded data array</p>"},{"title":"Constants#ABR_STRATEGY_BOLA","link":"<a href=\"Constants.html#ABR_STRATEGY_BOLA\">ABR_STRATEGY_BOLA</a>","description":"<p>Adaptive bitrate algorithm based on Bola (buffer level)</p>"},{"title":"Constants#ABR_STRATEGY_DYNAMIC","link":"<a href=\"Constants.html#ABR_STRATEGY_DYNAMIC\">ABR_STRATEGY_DYNAMIC</a>","description":"<p>Dynamic Adaptive bitrate algorithm</p>"},{"title":"Constants#ABR_STRATEGY_L2A","link":"<a href=\"Constants.html#ABR_STRATEGY_L2A\">ABR_STRATEGY_L2A</a>","description":"<p>Adaptive bitrate algorithm based on L2A (online learning)</p>"},{"title":"Constants#ABR_STRATEGY_LoLP","link":"<a href=\"Constants.html#ABR_STRATEGY_LoLP\">ABR_STRATEGY_LoLP</a>","description":"<p>Adaptive bitrate algorithm based on LoL+</p>"},{"title":"Constants#ABR_STRATEGY_THROUGHPUT","link":"<a href=\"Constants.html#ABR_STRATEGY_THROUGHPUT\">ABR_STRATEGY_THROUGHPUT</a>","description":"<p>Adaptive bitrate algorithm based on throughput</p>"},{"title":"Constants#AUDIO","link":"<a href=\"Constants.html#AUDIO\">AUDIO</a>","description":"<p>Audio media type</p>"},{"title":"Constants#BAD_ARGUMENT_ERROR","link":"<a href=\"Constants.html#BAD_ARGUMENT_ERROR\">BAD_ARGUMENT_ERROR</a>","description":"<p>Invalid Arguments type of error</p>"},{"title":"Constants#CMCD_MODE_HEADER","link":"<a href=\"Constants.html#CMCD_MODE_HEADER\">CMCD_MODE_HEADER</a>","description":"<p>specifies to attach CMCD metrics as HTTP headers.</p>"},{"title":"Constants#CMCD_MODE_QUERY","link":"<a href=\"Constants.html#CMCD_MODE_QUERY\">CMCD_MODE_QUERY</a>","description":"<p>specifies to attach CMCD metrics as query parameters.</p>"},{"title":"Constants#Content","link":"<a href=\"Constants.html#Content\">Content</a>","description":"<p>Steering</p>"},{"title":"Constants#EWMA","link":"<a href=\"Constants.html#EWMA\">EWMA</a>","description":"<p>Exponential moving average</p>"},{"title":"Constants#IMAGE","link":"<a href=\"Constants.html#IMAGE\">IMAGE</a>","description":"<p>Image media type</p>"},{"title":"Constants#LIVE_CATCHUP_MODE_DEFAULT","link":"<a href=\"Constants.html#LIVE_CATCHUP_MODE_DEFAULT\">LIVE_CATCHUP_MODE_DEFAULT</a>","description":"<p>Throughput calculation based on moof parsing</p>"},{"title":"Constants#LIVE_CATCHUP_MODE_LOLP","link":"<a href=\"Constants.html#LIVE_CATCHUP_MODE_LOLP\">LIVE_CATCHUP_MODE_LOLP</a>","description":"<p>Throughput calculation based on moof parsing</p>"},{"title":"Constants#MISSING_CONFIG_ERROR","link":"<a href=\"Constants.html#MISSING_CONFIG_ERROR\">MISSING_CONFIG_ERROR</a>","description":"<p>Missing configuration parameters type of error</p>"},{"title":"Constants#MOVING_AVERAGE_SLIDING_WINDOW","link":"<a href=\"Constants.html#MOVING_AVERAGE_SLIDING_WINDOW\">MOVING_AVERAGE_SLIDING_WINDOW</a>","description":"<p>Moving average sliding window</p>"},{"title":"Constants#MUXED","link":"<a href=\"Constants.html#MUXED\">MUXED</a>","description":"<p>Muxed (video/audio in the same chunk) media type</p>"},{"title":"Constants#STPP","link":"<a href=\"Constants.html#STPP\">STPP</a>","description":"<p>STTP Subtitles format</p>"},{"title":"Constants#STREAM","link":"<a href=\"Constants.html#STREAM\">STREAM</a>","description":"<p>Stream media type. Mainly used to report metrics relative to the full stream</p>"},{"title":"Constants#TEXT","link":"<a href=\"Constants.html#TEXT\">TEXT</a>","description":"<p>Text media type</p>"},{"title":"Constants#TRACK_SELECTION_MODE_FIRST_TRACK","link":"<a href=\"Constants.html#TRACK_SELECTION_MODE_FIRST_TRACK\">TRACK_SELECTION_MODE_FIRST_TRACK</a>","description":"<p>makes the player select the first track found in the manifest.</p>"},{"title":"Constants#TRACK_SELECTION_MODE_HIGHEST_BITRATE","link":"<a href=\"Constants.html#TRACK_SELECTION_MODE_HIGHEST_BITRATE\">TRACK_SELECTION_MODE_HIGHEST_BITRATE</a>","description":"<p>makes the player select the track with a highest bitrate. This mode is a default mode.</p>"},{"title":"Constants#TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY","link":"<a href=\"Constants.html#TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY\">TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY</a>","description":"<p>makes the player select the track with the lowest bitrate per pixel average.</p>"},{"title":"Constants#TRACK_SELECTION_MODE_WIDEST_RANGE","link":"<a href=\"Constants.html#TRACK_SELECTION_MODE_WIDEST_RANGE\">TRACK_SELECTION_MODE_WIDEST_RANGE</a>","description":"<p>makes the player select the track with a widest range of bitrates.</p>"},{"title":"Constants#TRACK_SELECTION_MODE_WIDEST_RANGE","link":"<a href=\"Constants.html#TRACK_SELECTION_MODE_WIDEST_RANGE\">TRACK_SELECTION_MODE_WIDEST_RANGE</a>","description":"<p>makes the player select the track with the highest selectionPriority as defined in the manifest</p>"},{"title":"Constants#TRACK_SWITCH_MODE_ALWAYS_REPLACE","link":"<a href=\"Constants.html#TRACK_SWITCH_MODE_ALWAYS_REPLACE\">TRACK_SWITCH_MODE_ALWAYS_REPLACE</a>","description":"<p>used to clear the buffered data (prior to current playback position) after track switch. Default for audio</p>"},{"title":"Constants#TRACK_SWITCH_MODE_NEVER_REPLACE","link":"<a href=\"Constants.html#TRACK_SWITCH_MODE_NEVER_REPLACE\">TRACK_SWITCH_MODE_NEVER_REPLACE</a>","description":"<p>used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video</p>"},{"title":"Constants#TTML","link":"<a href=\"Constants.html#TTML\">TTML</a>","description":"<p>STTP Subtitles format</p>"},{"title":"Constants#VIDEO","link":"<a href=\"Constants.html#VIDEO\">VIDEO</a>","description":"<p>Video media type</p>"},{"title":"Constants#VTT","link":"<a href=\"Constants.html#VTT\">VTT</a>","description":"<p>STTP Subtitles format</p>"},{"title":"Constants#WVTT","link":"<a href=\"Constants.html#WVTT\">WVTT</a>","description":"<p>STTP Subtitles format</p>"},{"title":"ContentSteeringController~getCurrentSteeringResponseData","link":"<a href=\"ContentSteeringController.html#~getCurrentSteeringResponseData\">getCurrentSteeringResponseData</a>","description":"<p>Returns the currentSteeringResponseData</p>"},{"title":"ContentSteeringController~getSteeringDataFromManifest","link":"<a href=\"ContentSteeringController.html#~getSteeringDataFromManifest\">getSteeringDataFromManifest</a>","description":"<p>Query DashAdapter and Service Description Controller to get the steering information defined in the manifest</p>"},{"title":"ContentSteeringController~getSynthesizedBaseUrlElements","link":"<a href=\"ContentSteeringController.html#~getSynthesizedBaseUrlElements\">getSynthesizedBaseUrlElements</a>","description":"<p>Returns synthesized BaseURL elements based on Pathway Cloning</p>"},{"title":"ContentSteeringController~getSynthesizedLocationElements","link":"<a href=\"ContentSteeringController.html#~getSynthesizedLocationElements\">getSynthesizedLocationElements</a>","description":"<p>Returns synthesized Location elements based on Pathway Cloning</p>"},{"title":"ContentSteeringController~initialize","link":"<a href=\"ContentSteeringController.html#~initialize\">initialize</a>","description":"<p>Initialize the steering controller by instantiating classes and registering observer callback</p>"},{"title":"ContentSteeringController~loadSteeringData","link":"<a href=\"ContentSteeringController.html#~loadSteeringData\">loadSteeringData</a>","description":"<p>Load the steering data from the steering server</p>"},{"title":"ContentSteeringController~shouldQueryBeforeStart","link":"<a href=\"ContentSteeringController.html#~shouldQueryBeforeStart\">shouldQueryBeforeStart</a>","description":"<p>Should query steering server prior to playback start</p>"},{"title":"ContentSteeringController~stopSteeringRequestTimer","link":"<a href=\"ContentSteeringController.html#~stopSteeringRequestTimer\">stopSteeringRequestTimer</a>","description":"<p>Stop timeout for next steering request</p>"},{"title":"CustomParametersModel~_findAbrCustomRuleIndex","link":"<a href=\"CustomParametersModel.html#~_findAbrCustomRuleIndex\">_findAbrCustomRuleIndex</a>","description":"<p>Iterate through the list of custom ABR rules and find the right rule by name</p>"},{"title":"CustomParametersModel~addAbrCustomRule","link":"<a href=\"CustomParametersModel.html#~addAbrCustomRule\">addAbrCustomRule</a>","description":"<p>Add a custom ABR Rule<br>\nRule will be apply on next stream if a stream is being played</p>"},{"title":"CustomParametersModel~addUTCTimingSource","link":"<a href=\"CustomParametersModel.html#~addUTCTimingSource\">addUTCTimingSource</a>","description":"<p>Add a UTC timing source at the top of the list</p>"},{"title":"CustomParametersModel~clearDefaultUTCTimingSources","link":"<a href=\"CustomParametersModel.html#~clearDefaultUTCTimingSources\">clearDefaultUTCTimingSources</a>","description":"<p>Remove all timing sources</p>"},{"title":"CustomParametersModel~getAbrCustomRules","link":"<a href=\"CustomParametersModel.html#~getAbrCustomRules\">getAbrCustomRules</a>","description":"<p>Return all ABR custom rules</p>"},{"title":"CustomParametersModel~getCustomCapabilitiesFilters","link":"<a href=\"CustomParametersModel.html#~getCustomCapabilitiesFilters\">getCustomCapabilitiesFilters</a>","description":"<p>Returns all custom capabilities filter</p>"},{"title":"CustomParametersModel~getCustomInitialTrackSelectionFunction","link":"<a href=\"CustomParametersModel.html#~getCustomInitialTrackSelectionFunction\">getCustomInitialTrackSelectionFunction</a>","description":"<p>Returns the initial track selection function</p>"},{"title":"CustomParametersModel~getLicenseRequestFilters","link":"<a href=\"CustomParametersModel.html#~getLicenseRequestFilters\">getLicenseRequestFilters</a>","description":"<p>Returns all license request filters</p>"},{"title":"CustomParametersModel~getLicenseResponseFilters","link":"<a href=\"CustomParametersModel.html#~getLicenseResponseFilters\">getLicenseResponseFilters</a>","description":"<p>Returns all license response filters</p>"},{"title":"CustomParametersModel~getUTCTimingSources","link":"<a href=\"CustomParametersModel.html#~getUTCTimingSources\">getUTCTimingSources</a>","description":"<p>Return all UTC timing sources</p>"},{"title":"CustomParametersModel~registerCustomCapabilitiesFilter","link":"<a href=\"CustomParametersModel.html#~registerCustomCapabilitiesFilter\">registerCustomCapabilitiesFilter</a>","description":"<p>Registers a custom capabilities filter. This enables application to filter representations to use.<br>\nThe provided callback function shall return a boolean based on whether or not to use the representation.<br>\nThe filters are applied in the order they are registered.</p>"},{"title":"CustomParametersModel~registerLicenseRequestFilter","link":"<a href=\"CustomParametersModel.html#~registerLicenseRequestFilter\">registerLicenseRequestFilter</a>","description":"<p>Registers a license request filter. This enables application to manipulate/overwrite any request parameter and/or request data.<br>\nThe provided callback function shall return a promise that shall be resolved once the filter process is completed.<br>\nThe filters are applied in the order they are registered.</p>"},{"title":"CustomParametersModel~registerLicenseResponseFilter","link":"<a href=\"CustomParametersModel.html#~registerLicenseResponseFilter\">registerLicenseResponseFilter</a>","description":"<p>Registers a license response filter. This enables application to manipulate/overwrite the response data<br>\nThe provided callback function shall return a promise that shall be resolved once the filter process is completed.<br>\nThe filters are applied in the order they are registered.</p>"},{"title":"CustomParametersModel~removeAbrCustomRule","link":"<a href=\"CustomParametersModel.html#~removeAbrCustomRule\">removeAbrCustomRule</a>","description":"<p>Remove a custom ABR Rule</p>"},{"title":"CustomParametersModel~removeAllAbrCustomRule","link":"<a href=\"CustomParametersModel.html#~removeAllAbrCustomRule\">removeAllAbrCustomRule</a>","description":"<p>Remove all custom rules</p>"},{"title":"CustomParametersModel~removeUTCTimingSource","link":"<a href=\"CustomParametersModel.html#~removeUTCTimingSource\">removeUTCTimingSource</a>","description":"<p>Remove a specific timing source from the array</p>"},{"title":"CustomParametersModel~resetCustomInitialTrackSelectionFunction","link":"<a href=\"CustomParametersModel.html#~resetCustomInitialTrackSelectionFunction\">resetCustomInitialTrackSelectionFunction</a>","description":"<p>Resets the custom initial track selection</p>"},{"title":"CustomParametersModel~restoreDefaultUTCTimingSources","link":"<a href=\"CustomParametersModel.html#~restoreDefaultUTCTimingSources\">restoreDefaultUTCTimingSources</a>","description":"<p>Add the default timing source to the list</p>"},{"title":"CustomParametersModel~setCustomInitialTrackSelectionFunction","link":"<a href=\"CustomParametersModel.html#~setCustomInitialTrackSelectionFunction\">setCustomInitialTrackSelectionFunction</a>","description":"<p>Registers a custom initial track selection function. Only one function is allowed. Calling this method will overwrite a potentially existing function.</p>"},{"title":"CustomParametersModel~unregisterCustomCapabilitiesFilter","link":"<a href=\"CustomParametersModel.html#~unregisterCustomCapabilitiesFilter\">unregisterCustomCapabilitiesFilter</a>","description":"<p>Unregisters a custom capabilities filter.</p>"},{"title":"CustomParametersModel~unregisterLicenseRequestFilter","link":"<a href=\"CustomParametersModel.html#~unregisterLicenseRequestFilter\">unregisterLicenseRequestFilter</a>","description":"<p>Unregisters a license request filter.</p>"},{"title":"CustomParametersModel~unregisterLicenseResponseFilter","link":"<a href=\"CustomParametersModel.html#~unregisterLicenseResponseFilter\">unregisterLicenseResponseFilter</a>","description":"<p>Unregisters a license response filter.</p>"},{"title":"DashHandler~getNextSegmentRequest","link":"<a href=\"DashHandler.html#~getNextSegmentRequest\">getNextSegmentRequest</a>","description":"<p>Main function to get the next segment request.</p>"},{"title":"DashHandler~getNextSegmentRequestIdempotent","link":"<a href=\"DashHandler.html#~getNextSegmentRequestIdempotent\">getNextSegmentRequestIdempotent</a>","description":"<p>This function returns the next segment request without modifying any internal variables. Any class (e.g CMCD Model) that needs information about the upcoming request should use this method.</p>"},{"title":"DashHandler~getValidTimeAheadOfTargetTime","link":"<a href=\"DashHandler.html#~getValidTimeAheadOfTargetTime\">getValidTimeAheadOfTargetTime</a>","description":"<p>This function returns a time larger than the current time for which we can generate a request.<br>\nThis is useful in scenarios in which the user seeks into a gap in a dynamic Timeline manifest. We will not find a valid request then and need to adjust the seektime.</p>"},{"title":"DroppedFrames#droppedFrames","link":"<a href=\"DroppedFrames.html#droppedFrames\">droppedFrames</a>","description":"<p>Number of dropped frames</p>"},{"title":"DroppedFrames#time","link":"<a href=\"DroppedFrames.html#time\">time</a>","description":"<p>Real-Time | Time of the measurement of the dropped frames.</p>"},{"title":"DVBFonts~addFontsFromTracks","link":"<a href=\"DVBFonts.html#~addFontsFromTracks\">addFontsFromTracks</a>","description":"<p>Adds all fonts to the dvb font list from all tracks</p>"},{"title":"DVBFonts~downloadFonts","link":"<a href=\"DVBFonts.html#~downloadFonts\">downloadFonts</a>","description":"<p>Initiate the download of a dvb custom font.<br>\nThe browser will neatly handle duplicate fonts</p>"},{"title":"DVBFonts~getFonts","link":"<a href=\"DVBFonts.html#~getFonts\">getFonts</a>","description":"<p>Returns current list of all known DVB Fonts</p>"},{"title":"DVBFonts~getFontsForTrackId","link":"<a href=\"DVBFonts.html#~getFontsForTrackId\">getFontsForTrackId</a>","description":"<p>Returns dvbFonts relative to a track given a trackId</p>"},{"title":"DVBFonts~reset","link":"<a href=\"DVBFonts.html#~reset\">reset</a>","description":"<p>Reset DVBFonts instance</p>"},{"title":"DVRInfo#manifestInfo","link":"<a href=\"DVRInfo.html#manifestInfo\">manifestInfo</a>","description":"<p>Reference to the internal ManifestInfo.js VO.</p>"},{"title":"DVRInfo#range","link":"<a href=\"DVRInfo.html#range\">range</a>","description":"<p>The current Segment Availability Range as an object with start and end properties.<br>\nIt's delta defined by the timeShiftBufferDepth MPD attribute.</p>"},{"title":"DVRInfo#time","link":"<a href=\"DVRInfo.html#time\">time</a>","description":"<p>The current time of the video element when this was created.</p>"},{"title":"EBMLParser.consumeTag","link":"<a href=\"EBMLParser.html#.consumeTag\">consumeTag</a>","description":"<p>Consumes an EBML tag from the data stream.</p>"},{"title":"EBMLParser.consumeTagAndSize","link":"<a href=\"EBMLParser.html#.consumeTagAndSize\">consumeTagAndSize</a>","description":"<p>Consumes an EBML tag from the data stream.   If the tag is found then this<br>\nfunction will also remove the size field which follows the tag from the<br>\ndata stream.</p>"},{"title":"EBMLParser.getMatroskaCodedNum","link":"<a href=\"EBMLParser.html#.getMatroskaCodedNum\">getMatroskaCodedNum</a>","description":"<p>Returns and consumes a number encoded according to the Matroska EBML<br>\nspecification from the bitstream.</p>"},{"title":"EBMLParser.getMatroskaFloat","link":"<a href=\"EBMLParser.html#.getMatroskaFloat\">getMatroskaFloat</a>","description":"<p>Returns and consumes a float from the bitstream.</p>"},{"title":"EBMLParser.getMatroskaUint","link":"<a href=\"EBMLParser.html#.getMatroskaUint\">getMatroskaUint</a>","description":"<p>Consumes and returns an unsigned int from the bitstream.</p>"},{"title":"EBMLParser.moreData","link":"<a href=\"EBMLParser.html#.moreData\">moreData</a>","description":"<p>Tests whether there is more data in the bitstream for parsing</p>"},{"title":"EBMLParser.parseTag","link":"<a href=\"EBMLParser.html#.parseTag\">parseTag</a>","description":"<p>Consumes an EBML tag from the data stream.   If the tag is found then this<br>\nfunction will also remove the size field which follows the tag from the<br>\ndata stream.  It will use the value of the size field to parse a binary<br>\nfield, using a parser defined in the tag itself</p>"},{"title":"EBMLParser.skipOverElement","link":"<a href=\"EBMLParser.html#.skipOverElement\">skipOverElement</a>","description":"<p>Consumes an EBML tag from the data stream.   If the tag is found then this<br>\nfunction will also remove the size field which follows the tag from the<br>\ndata stream.  It will use the value of the size field to skip over the<br>\nentire section of EBML encapsulated by the tag.</p>"},{"title":"EBMLParser~getMatroskaUintLarge","link":"<a href=\"EBMLParser.html#~getMatroskaUintLarge\">getMatroskaUintLarge</a>","description":"<p>Consumes and returns an unsigned int from the bitstream.</p>"},{"title":"Errors","link":"<a href=\"Errors.html\">Errors</a>"},{"title":"Errors#APPEND_ERROR_CODE","link":"<a href=\"Errors.html#APPEND_ERROR_CODE\">APPEND_ERROR_CODE</a>","description":"<p>Error code returned when the append operation in the SourceBuffer failed</p>"},{"title":"Errors#CAPABILITY_MEDIAKEYS_ERROR_CODE","link":"<a href=\"Errors.html#CAPABILITY_MEDIAKEYS_ERROR_CODE\">CAPABILITY_MEDIAKEYS_ERROR_CODE</a>","description":"<p>Error code returned when Protected contents are not supported</p>"},{"title":"Errors#CAPABILITY_MEDIASOURCE_ERROR_CODE","link":"<a href=\"Errors.html#CAPABILITY_MEDIASOURCE_ERROR_CODE\">CAPABILITY_MEDIASOURCE_ERROR_CODE</a>","description":"<p>Error code returned when MediaSource is not supported by the browser</p>"},{"title":"Errors#DATA_UPDATE_FAILED_ERROR_CODE","link":"<a href=\"Errors.html#DATA_UPDATE_FAILED_ERROR_CODE\">DATA_UPDATE_FAILED_ERROR_CODE</a>","description":"<p>Error code returned when updating the internal objects after loading an MPD failed</p>"},{"title":"Errors#DOWNLOAD_ERROR_ID_CONTENT_CODE","link":"<a href=\"Errors.html#DOWNLOAD_ERROR_ID_CONTENT_CODE\">DOWNLOAD_ERROR_ID_CONTENT_CODE</a>","description":"<p>Error code returned when loading the media content failed</p>"},{"title":"Errors#DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","link":"<a href=\"Errors.html#DOWNLOAD_ERROR_ID_INITIALIZATION_CODE\">DOWNLOAD_ERROR_ID_INITIALIZATION_CODE</a>","description":"<p>Error code returned when loading the init segment failed</p>"},{"title":"Errors#DOWNLOAD_ERROR_ID_MANIFEST_CODE","link":"<a href=\"Errors.html#DOWNLOAD_ERROR_ID_MANIFEST_CODE\">DOWNLOAD_ERROR_ID_MANIFEST_CODE</a>","description":"<p>Error code returned when loading the manifest failed</p>"},{"title":"Errors#DOWNLOAD_ERROR_ID_SIDX_CODE","link":"<a href=\"Errors.html#DOWNLOAD_ERROR_ID_SIDX_CODE\">DOWNLOAD_ERROR_ID_SIDX_CODE</a>","description":"<p>Error code returned when loading the sidx failed</p>"},{"title":"Errors#DOWNLOAD_ERROR_ID_XLINK_CODE","link":"<a href=\"Errors.html#DOWNLOAD_ERROR_ID_XLINK_CODE\">DOWNLOAD_ERROR_ID_XLINK_CODE</a>","description":"<p>Error code returned when loading the XLink content failed</p>"},{"title":"Errors#FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","link":"<a href=\"Errors.html#FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE\">FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE</a>","description":"<p>Error code returned when loading a fragment failed</p>"},{"title":"Errors#FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","link":"<a href=\"Errors.html#FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE\">FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE</a>","description":"<p>Error code returned when the FragmentLoader did not receive a request object</p>"},{"title":"Errors#MANIFEST_ERROR_ID_MULTIPLEXED_CODE","link":"<a href=\"Errors.html#MANIFEST_ERROR_ID_MULTIPLEXED_CODE\">MANIFEST_ERROR_ID_MULTIPLEXED_CODE</a>","description":"<p>Error code returned when a 'muxed' media type has been detected in the manifest. This type is not supported</p>"},{"title":"Errors#MANIFEST_ERROR_ID_NOSTREAMS_CODE","link":"<a href=\"Errors.html#MANIFEST_ERROR_ID_NOSTREAMS_CODE\">MANIFEST_ERROR_ID_NOSTREAMS_CODE</a>","description":"<p>Error code returned when no stream (period) has been detected in the manifest</p>"},{"title":"Errors#MANIFEST_ERROR_ID_PARSE_CODE","link":"<a href=\"Errors.html#MANIFEST_ERROR_ID_PARSE_CODE\">MANIFEST_ERROR_ID_PARSE_CODE</a>","description":"<p>Error code returned when parsing the MPD resulted in a logical error</p>"},{"title":"Errors#MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE","link":"<a href=\"Errors.html#MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE\">MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE</a>","description":"<p>Error code returned when a manifest loading error occurs</p>"},{"title":"Errors#MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","link":"<a href=\"Errors.html#MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE\">MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE</a>","description":"<p>Error code returned when a manifest parsing error occurs</p>"},{"title":"Errors#MEDIASOURCE_TYPE_UNSUPPORTED_CODE","link":"<a href=\"Errors.html#MEDIASOURCE_TYPE_UNSUPPORTED_CODE\">MEDIASOURCE_TYPE_UNSUPPORTED_CODE</a>","description":"<p>Error code returned when a media source type is not supported</p>"},{"title":"Errors#REMOVE_ERROR_CODE","link":"<a href=\"Errors.html#REMOVE_ERROR_CODE\">REMOVE_ERROR_CODE</a>","description":"<p>Error code returned when the remove operation in the SourceBuffer failed</p>"},{"title":"Errors#SEGMENT_BASE_LOADER_ERROR_CODE","link":"<a href=\"Errors.html#SEGMENT_BASE_LOADER_ERROR_CODE\">SEGMENT_BASE_LOADER_ERROR_CODE</a>","description":"<p>Error code returned when no segment ranges could be determined from the sidx box</p>"},{"title":"Errors#TIME_SYNC_FAILED_ERROR_CODE","link":"<a href=\"Errors.html#TIME_SYNC_FAILED_ERROR_CODE\">TIME_SYNC_FAILED_ERROR_CODE</a>","description":"<p>Error code returned when the time synchronization failed</p>"},{"title":"Errors#TIMED_TEXT_ERROR_ID_PARSE_CODE","link":"<a href=\"Errors.html#TIMED_TEXT_ERROR_ID_PARSE_CODE\">TIMED_TEXT_ERROR_ID_PARSE_CODE</a>","description":"<p>Error code returned when something wrong has happened during parsing and appending subtitles (TTML or VTT)</p>"},{"title":"Errors#URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE","link":"<a href=\"Errors.html#URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE\">URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE</a>","description":"<p>Error code returned when the BaseUrl resolution failed</p>"},{"title":"Errors#XLINK_LOADER_LOADING_FAILURE_ERROR_CODE","link":"<a href=\"Errors.html#XLINK_LOADER_LOADING_FAILURE_ERROR_CODE\">XLINK_LOADER_LOADING_FAILURE_ERROR_CODE</a>","description":"<p>Error code returned when a xlink loading error occurs</p>"},{"title":"EventController~_onEventTimer","link":"<a href=\"EventController.html#~_onEventTimer\">_onEventTimer</a>","description":"<p>Iterate through the eventList and trigger the events</p>"},{"title":"EventController~_resetInitialSettings","link":"<a href=\"EventController.html#~_resetInitialSettings\">_resetInitialSettings</a>","description":"<p>Reset to initial settings</p>"},{"title":"EventController~_setup","link":"<a href=\"EventController.html#~_setup\">_setup</a>","description":"<p>Internal setup when class is instanced</p>"},{"title":"EventController~_stop","link":"<a href=\"EventController.html#~_stop\">_stop</a>","description":"<p>Stops the EventController by clearing the event interval</p>"},{"title":"EventController~addInbandEvents","link":"<a href=\"EventController.html#~addInbandEvents\">addInbandEvents</a>","description":"<p>Add EMSG events to the list of events<br>\nMessages with the same id within the scope of the same scheme_id_uri and value pair are equivalent , i.e. processing of any one event message box with the same id is sufficient.</p>"},{"title":"EventController~addInlineEvents","link":"<a href=\"EventController.html#~addInlineEvents\">addInlineEvents</a>","description":"<p>Add MPD events to the list of events.<br>\nEvents that are not in the MPD anymore but not triggered yet will still be deleted.<br>\nExisting events might get updated.</p>"},{"title":"EventController~checkConfig","link":"<a href=\"EventController.html#~checkConfig\">checkConfig</a>","description":"<p>Checks if the provded configuration is valid</p>"},{"title":"EventController~getInbandEvents","link":"<a href=\"EventController.html#~getInbandEvents\">getInbandEvents</a>","description":"<p>Returns all inband events that have not been triggered yet</p>"},{"title":"EventController~getInlineEvents","link":"<a href=\"EventController.html#~getInlineEvents\">getInlineEvents</a>","description":"<p>Returns all inline events that have not been triggered yet</p>"},{"title":"EventController~reset","link":"<a href=\"EventController.html#~reset\">reset</a>","description":"<p>Stop the EventController and reset all initial settings</p>"},{"title":"EventController~setConfig","link":"<a href=\"EventController.html#~setConfig\">setConfig</a>","description":"<p>Set the config of the EventController</p>"},{"title":"EventController~start","link":"<a href=\"EventController.html#~start\">start</a>","description":"<p>Starts the interval function of the EventController</p>"},{"title":"FragmentModel#getRequests","link":"<a href=\"FragmentModel.html#getRequests\">getRequests</a>","description":"<p>Gets an array of {@link FragmentRequest} objects</p>"},{"title":"FragmentSink#abort","link":"<a href=\"FragmentSink.html#abort\">abort</a>","description":"<p>Abort an append operation currently ongoing.</p>"},{"title":"FragmentSink#append","link":"<a href=\"FragmentSink.html#append\">append</a>","description":"<p>Append a chunk to the internal buffer. You should assume that the effects of this are asynchronous.</p>"},{"title":"FragmentSink#getAllBufferRanges","link":"<a href=\"FragmentSink.html#getAllBufferRanges\">getAllBufferRanges</a>"},{"title":"FragmentSink#remove","link":"<a href=\"FragmentSink.html#remove\">remove</a>","description":"<p>Remove data from within the specified time ranges.</p>"},{"title":"FragmentSink#reset","link":"<a href=\"FragmentSink.html#reset\">reset</a>","description":"<p>Remove all the data in the sink's internal buffer.</p>"},{"title":"HTTPRequest#_fileLoaderType","link":"<a href=\"HTTPRequest.html#_fileLoaderType\">_fileLoaderType</a>","description":"<p>The type of the loader that was used. Distinguish between fetch loader and xhr loader</p>"},{"title":"HTTPRequest#_mediaduration","link":"<a href=\"HTTPRequest.html#_mediaduration\">_mediaduration</a>","description":"<p>The duration of the media requests, if available, in seconds.</p>"},{"title":"HTTPRequest#_quality","link":"<a href=\"HTTPRequest.html#_quality\">_quality</a>","description":"<p>The media segment quality</p>"},{"title":"HTTPRequest#_responseHeaders","link":"<a href=\"HTTPRequest.html#_responseHeaders\">_responseHeaders</a>","description":"<p>all the response headers from request.</p>"},{"title":"HTTPRequest#_serviceLocation","link":"<a href=\"HTTPRequest.html#_serviceLocation\">_serviceLocation</a>","description":"<p>The selected service location for the request. string.</p>"},{"title":"HTTPRequest#_stream","link":"<a href=\"HTTPRequest.html#_stream\">_stream</a>","description":"<p>Type of stream (&quot;audio&quot; | &quot;video&quot; etc..)</p>"},{"title":"HTTPRequest#_tfinish","link":"<a href=\"HTTPRequest.html#_tfinish\">_tfinish</a>","description":"<p>Real-Time | The real time at which the request finished.</p>"},{"title":"HTTPRequest#actualurl","link":"<a href=\"HTTPRequest.html#actualurl\">actualurl</a>","description":"<p>The actual URL requested, if different from above</p>"},{"title":"HTTPRequest#cmsd","link":"<a href=\"HTTPRequest.html#cmsd\">cmsd</a>","description":"<p>The CMSD static and dynamic values retrieved from CMSD response headers.</p>"},{"title":"HTTPRequest#interval","link":"<a href=\"HTTPRequest.html#interval\">interval</a>","description":"<p>The duration of the throughput trace intervals (ms), for successful requests only.</p>"},{"title":"HTTPRequest#range","link":"<a href=\"HTTPRequest.html#range\">range</a>","description":"<p>The contents of the byte-range-spec part of the HTTP Range header.</p>"},{"title":"HTTPRequest#responsecode","link":"<a href=\"HTTPRequest.html#responsecode\">responsecode</a>","description":"<p>The HTTP response code.</p>"},{"title":"HTTPRequest#tcpid","link":"<a href=\"HTTPRequest.html#tcpid\">tcpid</a>","description":"<p>Identifier of the TCP connection on which the HTTP request was sent.</p>"},{"title":"HTTPRequest#trace","link":"<a href=\"HTTPRequest.html#trace\">trace</a>","description":"<p>Throughput traces, for successful requests only.</p>"},{"title":"HTTPRequest#trequest","link":"<a href=\"HTTPRequest.html#trequest\">trequest</a>","description":"<p>Real-Time | The real time at which the request was sent.</p>"},{"title":"HTTPRequest#tresponse","link":"<a href=\"HTTPRequest.html#tresponse\">tresponse</a>","description":"<p>Real-Time | The real time at which the first byte of the response was received.</p>"},{"title":"HTTPRequest#type","link":"<a href=\"HTTPRequest.html#type\">type</a>","description":"<p>This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.<br>\nThe type of the request:</p>\n<ul>\n<li>MPD</li>\n<li>XLink expansion</li>\n<li>Initialization Fragment</li>\n<li>Index Fragment</li>\n<li>Media Fragment</li>\n<li>Bitstream Switching Fragment</li>\n<li>other</li>\n</ul>"},{"title":"HTTPRequest#url","link":"<a href=\"HTTPRequest.html#url\">url</a>","description":"<p>The original URL (before any redirects or failures)</p>"},{"title":"HTTPRequestTrace#b","link":"<a href=\"HTTPRequestTrace.html#b\">b</a>","description":"<p>List of integers counting the bytes received in each trace interval within the measurement stream.</p>"},{"title":"HTTPRequestTrace#d","link":"<a href=\"HTTPRequestTrace.html#d\">d</a>","description":"<p>Measurement stream duration (ms).</p>"},{"title":"HTTPRequestTrace#s","link":"<a href=\"HTTPRequestTrace.html#s\">s</a>","description":"<p>Real-Time | Measurement stream start.</p>"},{"title":"IndexDBOfflineLoader~load","link":"<a href=\"IndexDBOfflineLoader.html#~load\">load</a>","description":"<p>Load manifest or fragment from indexeddb database</p>"},{"title":"IndexDBStore~createFragmentStore","link":"<a href=\"IndexDBStore.html#~createFragmentStore\">createFragmentStore</a>","description":"<p>Creates an instance of localforage to store fragments in indexed db</p>"},{"title":"IndexDBStore~deleteDownloadById","link":"<a href=\"IndexDBStore.html#~deleteDownloadById\">deleteDownloadById</a>","description":"<p>Remove download given its id (fragmentStore + manifest entry in manifest array)</p>"},{"title":"IndexDBStore~deleteFragmentStore","link":"<a href=\"IndexDBStore.html#~deleteFragmentStore\">deleteFragmentStore</a>","description":"<p>Remove fragment store</p>"},{"title":"IndexDBStore~dropAll","link":"<a href=\"IndexDBStore.html#~dropAll\">dropAll</a>","description":"<p>Remove all manifest and fragment store</p>"},{"title":"IndexDBStore~dropFragmentStore","link":"<a href=\"IndexDBStore.html#~dropFragmentStore\">dropFragmentStore</a>","description":"<p>Remove framgent store given its name</p>"},{"title":"IndexDBStore~getAllManifests","link":"<a href=\"IndexDBStore.html#~getAllManifests\">getAllManifests</a>","description":"<p>Returns all offline manifests</p>"},{"title":"IndexDBStore~getCurrentHigherManifestId","link":"<a href=\"IndexDBStore.html#~getCurrentHigherManifestId\">getCurrentHigherManifestId</a>","description":"<p>Return higher manifest id</p>"},{"title":"IndexDBStore~getFragmentByKey","link":"<a href=\"IndexDBStore.html#~getFragmentByKey\">getFragmentByKey</a>","description":"<p>Returns a fragment from its key</p>"},{"title":"IndexDBStore~getManifestById","link":"<a href=\"IndexDBStore.html#~getManifestById\">getManifestById</a>","description":"<p>Returns a manifest from its identifier</p>"},{"title":"IndexDBStore~getRepresentationCurrentState","link":"<a href=\"IndexDBStore.html#~getRepresentationCurrentState\">getRepresentationCurrentState</a>","description":"<p>Returns current downloaded segment index for representation</p>"},{"title":"IndexDBStore~saveSelectedRepresentations","link":"<a href=\"IndexDBStore.html#~saveSelectedRepresentations\">saveSelectedRepresentations</a>","description":"<p>save selected representation by user</p>"},{"title":"IndexDBStore~setDownloadingStatus","link":"<a href=\"IndexDBStore.html#~setDownloadingStatus\">setDownloadingStatus</a>","description":"<p>Update download status</p>"},{"title":"IndexDBStore~setRepresentationCurrentState","link":"<a href=\"IndexDBStore.html#~setRepresentationCurrentState\">setRepresentationCurrentState</a>","description":"<p>Updat last downloaded fragment index for representationId</p>"},{"title":"IndexDBStore~storeFragment","link":"<a href=\"IndexDBStore.html#~storeFragment\">storeFragment</a>","description":"<p>Store a fragment in fragment store</p>"},{"title":"IndexDBStore~storeManifest","link":"<a href=\"IndexDBStore.html#~storeManifest\">storeManifest</a>","description":"<p>Store a manifest in manifest array</p>"},{"title":"IndexDBStore~updateManifest","link":"<a href=\"IndexDBStore.html#~updateManifest\">updateManifest</a>","description":"<p>Update manifest</p>"},{"title":"InsufficientBufferRule~getMaxIndex","link":"<a href=\"InsufficientBufferRule.html#~getMaxIndex\">getMaxIndex</a>","description":"<p>If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.<br>\nOtherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that<br>\na whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.<br>\nIf the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.<br>\nIf the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.</p>"},{"title":"IsoFile#getBox","link":"<a href=\"IsoFile.html#getBox\">getBox</a>"},{"title":"IsoFile#getBoxes","link":"<a href=\"IsoFile.html#getBoxes\">getBoxes</a>"},{"title":"IsoFile#getLastBox","link":"<a href=\"IsoFile.html#getLastBox\">getLastBox</a>"},{"title":"IsoFile#setData","link":"<a href=\"IsoFile.html#setData\">setData</a>"},{"title":"KeySystem#getInitData","link":"<a href=\"KeySystem.html#getInitData\">getInitData</a>","description":"<p>Parse DRM-specific init data from the ContentProtection<br>\nelement.</p>"},{"title":"KeySystem#getLicenseRequestFromMessage","link":"<a href=\"KeySystem.html#getLicenseRequestFromMessage\">getLicenseRequestFromMessage</a>","description":"<p>For some key systems, the CDM message contains more than just the<br>\nlicense request data.  This method will pull the license request from<br>\nthe CDM message, if necessary.</p>"},{"title":"KeySystem#getLicenseServerURLFromInitData","link":"<a href=\"KeySystem.html#getLicenseServerURLFromInitData\">getLicenseServerURLFromInitData</a>","description":"<p>Returns a license server URL as parsed from key system initialization data (PSSH).</p>"},{"title":"KeySystem#getRequestHeadersFromMessage","link":"<a href=\"KeySystem.html#getRequestHeadersFromMessage\">getRequestHeadersFromMessage</a>","description":"<p>For some key systems, the CDM message contains HTTP headers that<br>\ncan be parsed by the application and attached to the license request.<br>\nReturns a header object with key/value pairs as object properties/values</p>"},{"title":"KeySystem#schemeIdURI","link":"<a href=\"KeySystem.html#schemeIdURI\">schemeIdURI</a>","description":"<p>The scheme ID URI for this key system in the form<br>\n'urn:uuid:01234567-89ab-cdef-0123-456789abcdef' as used<br>\nin DASH ContentProtection elements</p>"},{"title":"KeySystem#systemString","link":"<a href=\"KeySystem.html#systemString\">systemString</a>","description":"<p>Key system name string (e.g. 'org.w3.clearkey')</p>"},{"title":"KeySystem#uuid","link":"<a href=\"KeySystem.html#uuid\">uuid</a>","description":"<p>Key system UUID in the form '01234567-89ab-cdef-0123-456789abcdef'</p>"},{"title":"KeySystemClearKey.getClearKeysFromProtectionData","link":"<a href=\"KeySystemClearKey.html#.getClearKeysFromProtectionData\">getClearKeysFromProtectionData</a>","description":"<p>Returns desired clearkeys (as specified in the CDM message) from protection data</p>"},{"title":"KeySystemClearKey.getClearKeysFromProtectionData","link":"<a href=\"KeySystemClearKey.html#.getClearKeysFromProtectionData\">getClearKeysFromProtectionData</a>","description":"<p>Returns desired clearkeys (as specified in the CDM message) from protection data</p>"},{"title":"KeySystemPlayReady~getCDMData","link":"<a href=\"KeySystemPlayReady.html#~getCDMData\">getCDMData</a>","description":"<p>Get Playready Custom data</p>"},{"title":"KeySystemPlayReady~setPlayReadyMessageFormat","link":"<a href=\"KeySystemPlayReady.html#~setPlayReadyMessageFormat\">setPlayReadyMessageFormat</a>","description":"<p>It seems that some PlayReady implementations return their XML-based CDM<br>\nmessages using UTF16, while others return them as UTF8.  Use this function<br>\nto modify the message format to expect when parsing CDM messages.</p>"},{"title":"L2ARule~euclideanProjection","link":"<a href=\"L2ARule.html#~euclideanProjection\">euclideanProjection</a>","description":"<p>Project an n-dim vector y to the simplex Dn<br>\nDn = { x : x n-dim, 1 &gt;= x &gt;= 0, sum(x) = 1}<br>\nAlgorithm is explained at http://arxiv.org/abs/1101.6081</p>"},{"title":"L2ARule~getMaxIndex","link":"<a href=\"L2ARule.html#~getMaxIndex\">getMaxIndex</a>","description":"<p>Returns a switch request object indicating which quality is to be played</p>"},{"title":"L2ARule~reset","link":"<a href=\"L2ARule.html#~reset\">reset</a>","description":"<p>Reset the rule</p>"},{"title":"L2ARule~setup","link":"<a href=\"L2ARule.html#~setup\">setup</a>","description":"<p>Setup function to initialize L2ARule</p>"},{"title":"LearningAbrController~_setup","link":"<a href=\"LearningAbrController.html#~_setup\">_setup</a>","description":"<p>Setup the class</p>"},{"title":"LearningAbrController~getNextQuality","link":"<a href=\"LearningAbrController.html#~getNextQuality\">getNextQuality</a>"},{"title":"LearningAbrController~reset","link":"<a href=\"LearningAbrController.html#~reset\">reset</a>","description":"<p>Reset all values</p>"},{"title":"LICENSE_SERVER_MANIFEST_CONFIGURATIONS","link":"<a href=\"global.html#LICENSE_SERVER_MANIFEST_CONFIGURATIONS\">LICENSE_SERVER_MANIFEST_CONFIGURATIONS</a>","description":"<p>The copyright in this software is being made available under the BSD License,<br>\nincluded below. This software may be subject to other third party and contributor<br>\nrights, including patent rights, and no such rights are granted under this license.</p>\n<p>Copyright (c) 2013, Dash Industry Forum.<br>\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without modification,<br>\nare permitted provided that the following conditions are met:</p>\n<ul>\n<li>Redistributions of source code must retain the above copyright notice, this<br>\nlist of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright notice,<br>\nthis list of conditions and the following disclaimer in the documentation and/or<br>\nother materials provided with the distribution.</li>\n<li>Neither the name of Dash Industry Forum nor the names of its<br>\ncontributors may be used to endorse or promote products derived from this software<br>\nwithout specific prior written permission.</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY<br>\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<br>\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.<br>\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,<br>\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT<br>\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR<br>\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,<br>\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)<br>\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<br>\nPOSSIBILITY OF SUCH DAMAGE.</p>"},{"title":"LicenseRequest#data","link":"<a href=\"LicenseRequest.html#data\">data</a>","description":"<p>The license request data</p>"},{"title":"LicenseRequest#headers","link":"<a href=\"LicenseRequest.html#headers\">headers</a>","description":"<p>The HTP request headers</p>"},{"title":"LicenseRequest#messageType","link":"<a href=\"LicenseRequest.html#messageType\">messageType</a>","description":"<p>The license request message type (see https://www.w3.org/TR/encrypted-media/#dom-mediakeymessagetype)</p>"},{"title":"LicenseRequest#method","link":"<a href=\"LicenseRequest.html#method\">method</a>","description":"<p>The HTTP method</p>"},{"title":"LicenseRequest#responseType","link":"<a href=\"LicenseRequest.html#responseType\">responseType</a>","description":"<p>The HTTP response type</p>"},{"title":"LicenseRequest#sessionId","link":"<a href=\"LicenseRequest.html#sessionId\">sessionId</a>","description":"<p>The corresponding EME session ID</p>"},{"title":"LicenseRequest#url","link":"<a href=\"LicenseRequest.html#url\">url</a>","description":"<p>The license request url</p>"},{"title":"LicenseRequest#withCredentials","link":"<a href=\"LicenseRequest.html#withCredentials\">withCredentials</a>","description":"<p>Wether request is done using credentials (cross-site cookies)</p>"},{"title":"LicenseResponse#data","link":"<a href=\"LicenseResponse.html#data\">data</a>","description":"<p>The license response data</p>"},{"title":"LicenseResponse#headers","link":"<a href=\"LicenseResponse.html#headers\">headers</a>","description":"<p>The HTP response headers</p>"},{"title":"LicenseResponse#url","link":"<a href=\"LicenseResponse.html#url\">url</a>","description":"<p>The url that was loaded, that can be redirected from original request url</p>"},{"title":"LicenseServer#getErrorResponse","link":"<a href=\"LicenseServer.html#getErrorResponse\">getErrorResponse</a>","description":"<p>Parses the license server response during error conditions and returns a<br>\nstring to display for debugging purposes</p>"},{"title":"LicenseServer#getHTTPMethod","link":"<a href=\"LicenseServer.html#getHTTPMethod\">getHTTPMethod</a>","description":"<p>Returns the HTTP method to be used (i.e. &quot;GET&quot;, &quot;POST&quot;, etc.) in<br>\nXMLHttpRequest.open().</p>"},{"title":"LicenseServer#getLicenseMessage","link":"<a href=\"LicenseServer.html#getLicenseMessage\">getLicenseMessage</a>","description":"<p>Parses the license server response for any message intended for<br>\nthe CDM.</p>"},{"title":"LicenseServer#getResponseType","link":"<a href=\"LicenseServer.html#getResponseType\">getResponseType</a>","description":"<p>Returns the response type to set for XMLHttpRequest.responseType</p>"},{"title":"LicenseServer#getServerURLFromMessage","link":"<a href=\"LicenseServer.html#getServerURLFromMessage\">getServerURLFromMessage</a>","description":"<p>Returns a new or updated license server URL based on the requirements of the<br>\nlicense server and possibly from information passed in the CDM license message</p>"},{"title":"LocationSelector~select","link":"<a href=\"LocationSelector.html#~select\">select</a>"},{"title":"Logger#debug","link":"<a href=\"Logger.html#debug\">debug</a>","description":"<p>This method allows you to send debug messages to the browser's console.</p>"},{"title":"Logger#error","link":"<a href=\"Logger.html#error\">error</a>","description":"<p>This method allows you to send error messages to the browser's console.</p>"},{"title":"Logger#fatal","link":"<a href=\"Logger.html#fatal\">fatal</a>","description":"<p>This method allows you to send fatal error messages (fatal errors implies playback interruption) to the browser's console.</p>"},{"title":"Logger#info","link":"<a href=\"Logger.html#info\">info</a>","description":"<p>This method allows you to send info messages to the browser's console.</p>"},{"title":"Logger#warning","link":"<a href=\"Logger.html#warning\">warning</a>","description":"<p>This method allows you to send warning messages to the browser's console.</p>"},{"title":"LoLPRule~reset","link":"<a href=\"LoLPRule.html#~reset\">reset</a>","description":"<p>Reset the rule</p>"},{"title":"LoLpWeightSelector~getMinBuffer","link":"<a href=\"LoLpWeightSelector.html#~getMinBuffer\">getMinBuffer</a>"},{"title":"LoLpWeightSelector~getNextBuffer","link":"<a href=\"LoLpWeightSelector.html#~getNextBuffer\">getNextBuffer</a>"},{"title":"LoLpWeightSelector~getNextBufferWithBitrate","link":"<a href=\"LoLpWeightSelector.html#~getNextBufferWithBitrate\">getNextBufferWithBitrate</a>"},{"title":"LoLpWeightSelector~getSegmentDuration","link":"<a href=\"LoLpWeightSelector.html#~getSegmentDuration\">getSegmentDuration</a>"},{"title":"LowLatencyThroughputModel~addMeasurement","link":"<a href=\"LowLatencyThroughputModel.html#~addMeasurement\">addMeasurement</a>","description":"<p>Add some measurement data for bookkeeping and being able to derive decisions on estimated throughput.</p>"},{"title":"LowLatencyThroughputModel~createBufferLevelTrendFunction","link":"<a href=\"LowLatencyThroughputModel.html#~createBufferLevelTrendFunction\">createBufferLevelTrendFunction</a>","description":"<p>Linear regression with least squares method to get a trend function for buffer lavel at chunk receive timestamps</p>"},{"title":"LowLatencyThroughputModel~getEstimatedDownloadDurationMS","link":"<a href=\"LowLatencyThroughputModel.html#~getEstimatedDownloadDurationMS\">getEstimatedDownloadDurationMS</a>","description":"<p>Based on the MPD, timing and buffer information of the last recent segments and their chunks<br>\nthe most stable download time (in milliseconds) is calculated.</p>"},{"title":"LowLatencyThroughputModel~getThroughputCapacityDelayMS","link":"<a href=\"LowLatencyThroughputModel.html#~getThroughputCapacityDelayMS\">getThroughputCapacityDelayMS</a>","description":"<p>Get calculated value for a safe artificial delay of the next request to allow to accumulate some chunks.<br>\nThis allows better line throughput measurement.</p>"},{"title":"ManifestUpdate#availabilityStartTime","link":"<a href=\"ManifestUpdate.html#availabilityStartTime\">availabilityStartTime</a>","description":"<p>Calculated Availability Start time of the stream.</p>"},{"title":"ManifestUpdate#buffered","link":"<a href=\"ManifestUpdate.html#buffered\">buffered</a>","description":"<p>Actual element.ranges</p>"},{"title":"ManifestUpdate#clientTimeOffset","link":"<a href=\"ManifestUpdate.html#clientTimeOffset\">clientTimeOffset</a>","description":"<p>The calculated difference between the server and client wall clock time</p>"},{"title":"ManifestUpdate#currentTime","link":"<a href=\"ManifestUpdate.html#currentTime\">currentTime</a>","description":"<p>Actual element.currentTime</p>"},{"title":"ManifestUpdate#fetchTime","link":"<a href=\"ManifestUpdate.html#fetchTime\">fetchTime</a>","description":"<p>When this manifest update was received</p>"},{"title":"ManifestUpdate#latency","link":"<a href=\"ManifestUpdate.html#latency\">latency</a>","description":"<p>Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)</p>"},{"title":"ManifestUpdate#mediaType","link":"<a href=\"ManifestUpdate.html#mediaType\">mediaType</a>","description":"<p>Media Type Video | Audio | FragmentedText</p>"},{"title":"ManifestUpdate#presentationStartTime","link":"<a href=\"ManifestUpdate.html#presentationStartTime\">presentationStartTime</a>","description":"<p>the seek point (liveEdge for dynamic, Stream[0].startTime for static)</p>"},{"title":"ManifestUpdate#representationInfo","link":"<a href=\"ManifestUpdate.html#representationInfo\">representationInfo</a>","description":"<p>Array holding list of RepresentationInfo VO Objects</p>"},{"title":"ManifestUpdate#requestTime","link":"<a href=\"ManifestUpdate.html#requestTime\">requestTime</a>","description":"<p>When this manifest update was requested</p>"},{"title":"ManifestUpdate#streamInfo","link":"<a href=\"ManifestUpdate.html#streamInfo\">streamInfo</a>","description":"<p>Array holding list of StreamInfo VO Objects</p>"},{"title":"ManifestUpdate#type","link":"<a href=\"ManifestUpdate.html#type\">type</a>","description":"<p>MPD Type static | dynamic</p>"},{"title":"ManifestUpdateRepresentationInfo#fragmentInfoType","link":"<a href=\"ManifestUpdateRepresentationInfo.html#fragmentInfoType\">fragmentInfoType</a>","description":"<p>list|template|timeline</p>"},{"title":"ManifestUpdateRepresentationInfo#id","link":"<a href=\"ManifestUpdateRepresentationInfo.html#id\">id</a>","description":"<p>Track@id</p>"},{"title":"ManifestUpdateRepresentationInfo#index","link":"<a href=\"ManifestUpdateRepresentationInfo.html#index\">index</a>","description":"<p>Representation Index</p>"},{"title":"ManifestUpdateRepresentationInfo#mediaType","link":"<a href=\"ManifestUpdateRepresentationInfo.html#mediaType\">mediaType</a>","description":"<p>Media Type Video | Audio | FragmentedText</p>"},{"title":"ManifestUpdateRepresentationInfo#presentationTimeOffset","link":"<a href=\"ManifestUpdateRepresentationInfo.html#presentationTimeOffset\">presentationTimeOffset</a>","description":"<p>Holds reference to @presentationTimeOffset</p>"},{"title":"ManifestUpdateRepresentationInfo#startNumber","link":"<a href=\"ManifestUpdateRepresentationInfo.html#startNumber\">startNumber</a>","description":"<p>Holds reference to @startNumber</p>"},{"title":"ManifestUpdateRepresentationInfo#streamIndex","link":"<a href=\"ManifestUpdateRepresentationInfo.html#streamIndex\">streamIndex</a>","description":"<p>Which representation</p>"},{"title":"ManifestUpdateStreamInfo#duration","link":"<a href=\"ManifestUpdateStreamInfo.html#duration\">duration</a>","description":"<p>Stream@duration</p>"},{"title":"ManifestUpdateStreamInfo#id","link":"<a href=\"ManifestUpdateStreamInfo.html#id\">id</a>","description":"<p>Stream@id</p>"},{"title":"ManifestUpdateStreamInfo#index","link":"<a href=\"ManifestUpdateStreamInfo.html#index\">index</a>","description":"<p>Period Index</p>"},{"title":"ManifestUpdateStreamInfo#start","link":"<a href=\"ManifestUpdateStreamInfo.html#start\">start</a>","description":"<p>Stream@start</p>"},{"title":"MediaController#_isMultiTrackSupportedByType","link":"<a href=\"MediaController.html#_isMultiTrackSupportedByType\">_isMultiTrackSupportedByType</a>"},{"title":"MediaController#addTrack","link":"<a href=\"MediaController.html#addTrack\">addTrack</a>"},{"title":"MediaController#getCurrentTrackFor","link":"<a href=\"MediaController.html#getCurrentTrackFor\">getCurrentTrackFor</a>"},{"title":"MediaController#getInitialSettings","link":"<a href=\"MediaController.html#getInitialSettings\">getInitialSettings</a>"},{"title":"MediaController#getTracksFor","link":"<a href=\"MediaController.html#getTracksFor\">getTracksFor</a>"},{"title":"MediaController#isCurrentTrack","link":"<a href=\"MediaController.html#isCurrentTrack\">isCurrentTrack</a>"},{"title":"MediaController#isTracksEqual","link":"<a href=\"MediaController.html#isTracksEqual\">isTracksEqual</a>"},{"title":"MediaController#reset","link":"<a href=\"MediaController.html#reset\">reset</a>"},{"title":"MediaController#saveTextSettingsDisabled","link":"<a href=\"MediaController.html#saveTextSettingsDisabled\">saveTextSettingsDisabled</a>"},{"title":"MediaController#setInitialMediaSettingsForType","link":"<a href=\"MediaController.html#setInitialMediaSettingsForType\">setInitialMediaSettingsForType</a>"},{"title":"MediaController#setInitialSettings","link":"<a href=\"MediaController.html#setInitialSettings\">setInitialSettings</a>"},{"title":"MediaController#setTrack","link":"<a href=\"MediaController.html#setTrack\">setTrack</a>"},{"title":"MediaPlayer.dependencies.protection.KeySystem#getCDMData","link":"<a href=\"MediaPlayer.dependencies.protection.KeySystem.html#getCDMData\">getCDMData</a>","description":"<p>Returns specific CDM (custom) data.</p>"},{"title":"MediaPlayer.dependencies.protection.KeySystem#getSessionId","link":"<a href=\"MediaPlayer.dependencies.protection.KeySystem.html#getSessionId\">getSessionId</a>","description":"<p>Returns MediaKeySession session ID.</p>"},{"title":"MediaPlayerEvents","link":"<a href=\"MediaPlayerEvents.html\">MediaPlayerEvents</a>","description":"<p>Public facing external events to be used when developing a player that implements dash.js.</p>"},{"title":"MediaPlayerEvents#event:ADAPTATION_SET_REMOVED_NO_CAPABILITIES","link":"<a href=\"MediaPlayerEvents.html#event:ADAPTATION_SET_REMOVED_NO_CAPABILITIES\">ADAPTATION_SET_REMOVED_NO_CAPABILITIES</a>","description":"<p>Event that is dispatched whenever an adaptation set is removed due to all representations not being supported.</p>"},{"title":"MediaPlayerEvents#event:AST_IN_FUTURE","link":"<a href=\"MediaPlayerEvents.html#event:AST_IN_FUTURE\">AST_IN_FUTURE</a>","description":"<p>Triggered when playback will not start yet<br>\nas the MPD's availabilityStartTime is in the future.<br>\nCheck delay property in payload to determine time before playback will start.</p>"},{"title":"MediaPlayerEvents#event:BASE_URLS_UPDATED","link":"<a href=\"MediaPlayerEvents.html#event:BASE_URLS_UPDATED\">BASE_URLS_UPDATED</a>","description":"<p>Triggered when the BaseURLs have been updated.</p>"},{"title":"MediaPlayerEvents#event:BUFFER_EMPTY","link":"<a href=\"MediaPlayerEvents.html#event:BUFFER_EMPTY\">BUFFER_EMPTY</a>","description":"<p>Triggered when the video element's buffer state changes to stalled.<br>\nCheck mediaType in payload to determine type (Video, Audio, FragmentedText).</p>"},{"title":"MediaPlayerEvents#event:BUFFER_LEVEL_STATE_CHANGED","link":"<a href=\"MediaPlayerEvents.html#event:BUFFER_LEVEL_STATE_CHANGED\">BUFFER_LEVEL_STATE_CHANGED</a>","description":"<p>Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.</p>"},{"title":"MediaPlayerEvents#event:BUFFER_LEVEL_UPDATED","link":"<a href=\"MediaPlayerEvents.html#event:BUFFER_LEVEL_UPDATED\">BUFFER_LEVEL_UPDATED</a>","description":"<p>Triggered when the buffer level of a media type has been updated</p>"},{"title":"MediaPlayerEvents#event:BUFFER_LOADED","link":"<a href=\"MediaPlayerEvents.html#event:BUFFER_LOADED\">BUFFER_LOADED</a>","description":"<p>Triggered when the video element's buffer state changes to loaded.<br>\nCheck mediaType in payload to determine type (Video, Audio, FragmentedText).</p>"},{"title":"MediaPlayerEvents#event:CAN_PLAY","link":"<a href=\"MediaPlayerEvents.html#event:CAN_PLAY\">CAN_PLAY</a>","description":"<p>Sent when enough data is available that the media can be played,<br>\nat least for a couple of frames.  This corresponds to the<br>\nHAVE_ENOUGH_DATA readyState.</p>"},{"title":"MediaPlayerEvents#event:CAN_PLAY_THROUGH","link":"<a href=\"MediaPlayerEvents.html#event:CAN_PLAY_THROUGH\">CAN_PLAY_THROUGH</a>","description":"<p>This corresponds to the CAN_PLAY_THROUGH readyState.</p>"},{"title":"MediaPlayerEvents#event:CAPTION_CONTAINER_RESIZE","link":"<a href=\"MediaPlayerEvents.html#event:CAPTION_CONTAINER_RESIZE\">CAPTION_CONTAINER_RESIZE</a>","description":"<p>Triggered when the caption container is resized.</p>"},{"title":"MediaPlayerEvents#event:CAPTION_RENDERED","link":"<a href=\"MediaPlayerEvents.html#event:CAPTION_RENDERED\">CAPTION_RENDERED</a>","description":"<p>Triggered when a caption is rendered.</p>"},{"title":"MediaPlayerEvents#event:CONFORMANCE_VIOLATION","link":"<a href=\"MediaPlayerEvents.html#event:CONFORMANCE_VIOLATION\">CONFORMANCE_VIOLATION</a>","description":"<p>Event that is dispatched whenever the player encounters a potential conformance validation that might lead to unexpected/not optimal behavior</p>"},{"title":"MediaPlayerEvents#event:CONTENT_STEERING_REQUEST_COMPLETED","link":"<a href=\"MediaPlayerEvents.html#event:CONTENT_STEERING_REQUEST_COMPLETED\">CONTENT_STEERING_REQUEST_COMPLETED</a>","description":"<p>Triggered when a content steering request has completed.</p>"},{"title":"MediaPlayerEvents#event:CUE_ENTER","link":"<a href=\"MediaPlayerEvents.html#event:CUE_ENTER\">CUE_ENTER</a>","description":"<p>Triggered when a text track should be shown</p>"},{"title":"MediaPlayerEvents#event:CUE_ENTER","link":"<a href=\"MediaPlayerEvents.html#event:CUE_ENTER\">CUE_ENTER</a>","description":"<p>Triggered when a text track should be hidden</p>"},{"title":"MediaPlayerEvents#event:DVB_FONT_DOWNLOAD_ADDED","link":"<a href=\"MediaPlayerEvents.html#event:DVB_FONT_DOWNLOAD_ADDED\">DVB_FONT_DOWNLOAD_ADDED</a>","description":"<p>Triggered when a font signalled by a DVB Font Download has been added to the document FontFaceSet interface.</p>"},{"title":"MediaPlayerEvents#event:DVB_FONT_DOWNLOAD_COMPLETE","link":"<a href=\"MediaPlayerEvents.html#event:DVB_FONT_DOWNLOAD_COMPLETE\">DVB_FONT_DOWNLOAD_COMPLETE</a>","description":"<p>Triggered when a font signalled by a DVB Font Download has successfully downloaded and the FontFace can be used.</p>"},{"title":"MediaPlayerEvents#event:DVB_FONT_DOWNLOAD_FAILED","link":"<a href=\"MediaPlayerEvents.html#event:DVB_FONT_DOWNLOAD_FAILED\">DVB_FONT_DOWNLOAD_FAILED</a>","description":"<p>Triggered when a font signalled by a DVB Font Download could not be successfully downloaded, so the FontFace will not be used.</p>"},{"title":"MediaPlayerEvents#event:DYNAMIC_TO_STATIC","link":"<a href=\"MediaPlayerEvents.html#event:DYNAMIC_TO_STATIC\">DYNAMIC_TO_STATIC</a>","description":"<p>Triggered when a dynamic stream changed to static (transition phase between Live and On-Demand).</p>"},{"title":"MediaPlayerEvents#event:ERROR","link":"<a href=\"MediaPlayerEvents.html#event:ERROR\">ERROR</a>","description":"<p>Triggered when there is an error from the element or MSE source buffer.</p>"},{"title":"MediaPlayerEvents#event:EVENT_MODE_ON_RECEIVE","link":"<a href=\"MediaPlayerEvents.html#event:EVENT_MODE_ON_RECEIVE\">EVENT_MODE_ON_RECEIVE</a>","description":"<p>Dash events are triggered as soon as they were parsed.</p>"},{"title":"MediaPlayerEvents#event:EVENT_MODE_ON_START","link":"<a href=\"MediaPlayerEvents.html#event:EVENT_MODE_ON_START\">EVENT_MODE_ON_START</a>","description":"<p>Dash events are triggered at their respective start points on the timeline.</p>"},{"title":"MediaPlayerEvents#event:FRAGMENT_LOADING_ABANDONED","link":"<a href=\"MediaPlayerEvents.html#event:FRAGMENT_LOADING_ABANDONED\">FRAGMENT_LOADING_ABANDONED</a>","description":"<p>Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..</p>"},{"title":"MediaPlayerEvents#event:FRAGMENT_LOADING_COMPLETED","link":"<a href=\"MediaPlayerEvents.html#event:FRAGMENT_LOADING_COMPLETED\">FRAGMENT_LOADING_COMPLETED</a>","description":"<p>Triggered when a fragment download has completed.</p>"},{"title":"MediaPlayerEvents#event:FRAGMENT_LOADING_PROGRESS","link":"<a href=\"MediaPlayerEvents.html#event:FRAGMENT_LOADING_PROGRESS\">FRAGMENT_LOADING_PROGRESS</a>","description":"<p>Triggered when a partial fragment download has completed.</p>"},{"title":"MediaPlayerEvents#event:FRAGMENT_LOADING_STARTED","link":"<a href=\"MediaPlayerEvents.html#event:FRAGMENT_LOADING_STARTED\">FRAGMENT_LOADING_STARTED</a>","description":"<p>Triggered when a fragment download has started.</p>"},{"title":"MediaPlayerEvents#event:INBAND_PRFT","link":"<a href=\"MediaPlayerEvents.html#event:INBAND_PRFT\">INBAND_PRFT</a>","description":"<p>Triggered when an inband prft (ProducerReferenceTime) boxes has been received.</p>"},{"title":"MediaPlayerEvents#event:LOG","link":"<a href=\"MediaPlayerEvents.html#event:LOG\">LOG</a>","description":"<p>Triggered when {@link module:Debug} logger methods are called.</p>"},{"title":"MediaPlayerEvents#event:MANIFEST_LOADED","link":"<a href=\"MediaPlayerEvents.html#event:MANIFEST_LOADED\">MANIFEST_LOADED</a>","description":"<p>Triggered when the manifest load is complete, providing the payload</p>"},{"title":"MediaPlayerEvents#event:MANIFEST_LOADING_FINISHED","link":"<a href=\"MediaPlayerEvents.html#event:MANIFEST_LOADING_FINISHED\">MANIFEST_LOADING_FINISHED</a>","description":"<p>Triggered when the manifest loading is finished, providing the request object information</p>"},{"title":"MediaPlayerEvents#event:MANIFEST_LOADING_STARTED","link":"<a href=\"MediaPlayerEvents.html#event:MANIFEST_LOADING_STARTED\">MANIFEST_LOADING_STARTED</a>","description":"<p>Triggered when the manifest load is started</p>"},{"title":"MediaPlayerEvents#event:MANIFEST_VALIDITY_CHANGED","link":"<a href=\"MediaPlayerEvents.html#event:MANIFEST_VALIDITY_CHANGED\">MANIFEST_VALIDITY_CHANGED</a>","description":"<p>Manifest validity changed - As a result of an MPD validity expiration event.</p>"},{"title":"MediaPlayerEvents#event:METRIC_ADDED","link":"<a href=\"MediaPlayerEvents.html#event:METRIC_ADDED\">METRIC_ADDED</a>","description":"<p>Triggered every time a new metric is added.</p>"},{"title":"MediaPlayerEvents#event:METRIC_CHANGED","link":"<a href=\"MediaPlayerEvents.html#event:METRIC_CHANGED\">METRIC_CHANGED</a>","description":"<p>Triggered when an individual metric is added, updated or cleared.</p>"},{"title":"MediaPlayerEvents#event:METRIC_UPDATED","link":"<a href=\"MediaPlayerEvents.html#event:METRIC_UPDATED\">METRIC_UPDATED</a>","description":"<p>Triggered every time a metric is updated.</p>"},{"title":"MediaPlayerEvents#event:METRICS_CHANGED","link":"<a href=\"MediaPlayerEvents.html#event:METRICS_CHANGED\">METRICS_CHANGED</a>","description":"<p>Triggered anytime there is a change to the overall metrics.</p>"},{"title":"MediaPlayerEvents#event:PERIOD_SWITCH_COMPLETED","link":"<a href=\"MediaPlayerEvents.html#event:PERIOD_SWITCH_COMPLETED\">PERIOD_SWITCH_COMPLETED</a>","description":"<p>Triggered at the stream end of a period.</p>"},{"title":"MediaPlayerEvents#event:PERIOD_SWITCH_STARTED","link":"<a href=\"MediaPlayerEvents.html#event:PERIOD_SWITCH_STARTED\">PERIOD_SWITCH_STARTED</a>","description":"<p>Triggered when a new stream (period) starts.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_ENDED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_ENDED\">PLAYBACK_ENDED</a>","description":"<p>Sent when playback completes.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_ERROR","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_ERROR\">PLAYBACK_ERROR</a>","description":"<p>Sent when an error occurs.  The element's error<br>\nattribute contains more information.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_LOADED_DATA","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_LOADED_DATA\">PLAYBACK_LOADED_DATA</a>","description":"<p>The event is fired when the frame at the current playback position of the media has finished loading;<br>\noften the first frame</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_METADATA_LOADED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_METADATA_LOADED\">PLAYBACK_METADATA_LOADED</a>","description":"<p>The media's metadata has finished loading; all attributes now<br>\ncontain as much useful information as they're going to.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_NOT_ALLOWED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_NOT_ALLOWED\">PLAYBACK_NOT_ALLOWED</a>","description":"<p>Sent when playback is not allowed (for example if user gesture is needed).</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_PAUSED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_PAUSED\">PLAYBACK_PAUSED</a>","description":"<p>Sent when playback is paused.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_PLAYING","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_PLAYING\">PLAYBACK_PLAYING</a>","description":"<p>Sent when the media begins to play (either for the first time, after having been paused,<br>\nor after ending and then restarting).</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_PROGRESS","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_PROGRESS\">PLAYBACK_PROGRESS</a>","description":"<p>Sent periodically to inform interested parties of progress downloading<br>\nthe media. Information about the current amount of the media that has<br>\nbeen downloaded is available in the media element's buffered attribute.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_RATE_CHANGED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_RATE_CHANGED\">PLAYBACK_RATE_CHANGED</a>","description":"<p>Sent when the playback speed changes.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_SEEKED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_SEEKED\">PLAYBACK_SEEKED</a>","description":"<p>Sent when a seek operation completes.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_SEEKING","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_SEEKING\">PLAYBACK_SEEKING</a>","description":"<p>Sent when a seek operation begins.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_STALLED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_STALLED\">PLAYBACK_STALLED</a>","description":"<p>Sent when the video element reports stalled</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_STARTED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_STARTED\">PLAYBACK_STARTED</a>","description":"<p>Sent when playback of the media starts after having been paused;<br>\nthat is, when playback is resumed after a prior pause event.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_TIME_UPDATED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_TIME_UPDATED\">PLAYBACK_TIME_UPDATED</a>","description":"<p>The time indicated by the element's currentTime attribute has changed.</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_VOLUME_CHANGED","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_VOLUME_CHANGED\">PLAYBACK_VOLUME_CHANGED</a>","description":"<p>Sent when the video element reports that the volume has changed</p>"},{"title":"MediaPlayerEvents#event:PLAYBACK_WAITING","link":"<a href=\"MediaPlayerEvents.html#event:PLAYBACK_WAITING\">PLAYBACK_WAITING</a>","description":"<p>Sent when the media playback has stopped because of a temporary lack of data.</p>"},{"title":"MediaPlayerEvents#event:QUALITY_CHANGE_RENDERED","link":"<a href=\"MediaPlayerEvents.html#event:QUALITY_CHANGE_RENDERED\">QUALITY_CHANGE_RENDERED</a>","description":"<p>Triggered when the new ABR quality is being rendered on-screen.</p>"},{"title":"MediaPlayerEvents#event:QUALITY_CHANGE_REQUESTED","link":"<a href=\"MediaPlayerEvents.html#event:QUALITY_CHANGE_REQUESTED\">QUALITY_CHANGE_REQUESTED</a>","description":"<p>Triggered when an ABR up /down switch is initiated; either by user in manual mode or auto mode via ABR rules.</p>"},{"title":"MediaPlayerEvents#event:REPRESENTATION_SWITCH","link":"<a href=\"MediaPlayerEvents.html#event:REPRESENTATION_SWITCH\">REPRESENTATION_SWITCH</a>","description":"<p>Event that is dispatched whenever the player switches to a different representation</p>"},{"title":"MediaPlayerEvents#event:STREAM_ACTIVATED","link":"<a href=\"MediaPlayerEvents.html#event:STREAM_ACTIVATED\">STREAM_ACTIVATED</a>","description":"<p>Triggered when a stream (period) is activated</p>"},{"title":"MediaPlayerEvents#event:STREAM_DEACTIVATED","link":"<a href=\"MediaPlayerEvents.html#event:STREAM_DEACTIVATED\">STREAM_DEACTIVATED</a>","description":"<p>Triggered when a stream (period) is deactivated</p>"},{"title":"MediaPlayerEvents#event:STREAM_INITIALIZED","link":"<a href=\"MediaPlayerEvents.html#event:STREAM_INITIALIZED\">STREAM_INITIALIZED</a>","description":"<p>Triggered when a stream (period) is activated</p>"},{"title":"MediaPlayerEvents#event:STREAM_INITIALIZING","link":"<a href=\"MediaPlayerEvents.html#event:STREAM_INITIALIZING\">STREAM_INITIALIZING</a>","description":"<p>Triggered when a stream (period) is being loaded</p>"},{"title":"MediaPlayerEvents#event:STREAM_TEARDOWN_COMPLETE","link":"<a href=\"MediaPlayerEvents.html#event:STREAM_TEARDOWN_COMPLETE\">STREAM_TEARDOWN_COMPLETE</a>","description":"<p>Triggered when the player has been reset.</p>"},{"title":"MediaPlayerEvents#event:STREAM_UPDATED","link":"<a href=\"MediaPlayerEvents.html#event:STREAM_UPDATED\">STREAM_UPDATED</a>","description":"<p>Triggered when a stream (period) is loaded</p>"},{"title":"MediaPlayerEvents#event:TEXT_TRACK_ADDED","link":"<a href=\"MediaPlayerEvents.html#event:TEXT_TRACK_ADDED\">TEXT_TRACK_ADDED</a>","description":"<p>Triggered when a text track is added to the video element's TextTrackList</p>"},{"title":"MediaPlayerEvents#event:TEXT_TRACKS_ADDED","link":"<a href=\"MediaPlayerEvents.html#event:TEXT_TRACKS_ADDED\">TEXT_TRACKS_ADDED</a>","description":"<p>Triggered once all text tracks detected in the MPD are added to the video element.</p>"},{"title":"MediaPlayerEvents#event:THROUGHPUT_MEASUREMENT_STORED","link":"<a href=\"MediaPlayerEvents.html#event:THROUGHPUT_MEASUREMENT_STORED\">THROUGHPUT_MEASUREMENT_STORED</a>","description":"<p>Triggered when a throughput measurement based on the last segment request has been stored</p>"},{"title":"MediaPlayerEvents#event:TRACK_CHANGE_RENDERED","link":"<a href=\"MediaPlayerEvents.html#event:TRACK_CHANGE_RENDERED\">TRACK_CHANGE_RENDERED</a>","description":"<p>Triggered when the new track is being rendered.</p>"},{"title":"MediaPlayerEvents#event:TTML_PARSED","link":"<a href=\"MediaPlayerEvents.html#event:TTML_PARSED\">TTML_PARSED</a>","description":"<p>Triggered when a ttml chunk is parsed.</p>"},{"title":"MediaPlayerEvents#event:TTML_TO_PARSE","link":"<a href=\"MediaPlayerEvents.html#event:TTML_TO_PARSE\">TTML_TO_PARSE</a>","description":"<p>Triggered when a ttml chunk has to be parsed.</p>"},{"title":"MediaPlayerEvents#MANAGED_MEDIA_SOURCE_END_STREAMING","link":"<a href=\"MediaPlayerEvents.html#MANAGED_MEDIA_SOURCE_END_STREAMING\">MANAGED_MEDIA_SOURCE_END_STREAMING</a>","description":"<p>The streaming attribute of the Managed Media Source is false</p>"},{"title":"MediaPlayerEvents#MANAGED_MEDIA_SOURCE_START_STREAMING","link":"<a href=\"MediaPlayerEvents.html#MANAGED_MEDIA_SOURCE_START_STREAMING\">MANAGED_MEDIA_SOURCE_START_STREAMING</a>","description":"<p>The streaming attribute of the Managed Media Source is true</p>"},{"title":"MediaPlayerFactory~create","link":"<a href=\"MediaPlayerFactory.html#~create\">create</a>","description":"<p>A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,<br>\na default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose<br>\ntype is application/dash+xml.<br>\nThe autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.</p>"},{"title":"MediaPlayerFactory~createAll","link":"<a href=\"MediaPlayerFactory.html#~createAll\">createAll</a>","description":"<p>Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is<br>\nspecified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.<br>\nIt then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.<br>\nA new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.<br>\nThe autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.<br>\nReturns an array holding all the MediaPlayer instances that were added by this method.</p>"},{"title":"MediaPlayerFactory~SUPPORTED_MIME_TYPE","link":"<a href=\"MediaPlayerFactory.html#~SUPPORTED_MIME_TYPE\">SUPPORTED_MIME_TYPE</a>","description":"<p>mime-type identifier for any source content to be accepted as a dash manifest by the create() method.</p>"},{"title":"MediaPlayerModel","link":"<a href=\"MediaPlayerModel.html\">MediaPlayerModel</a>","description":"<p>We use this model as a wrapper/proxy between Settings.js and classes that are using parameters from Settings.js.<br>\nIn some cases we require additional logic to be applied and the settings might need to be adjusted before being used.</p>"},{"title":"MediaPlayerModel~_checkMaxPlaybackRate","link":"<a href=\"MediaPlayerModel.html#~_checkMaxPlaybackRate\">_checkMaxPlaybackRate</a>","description":"<p>Checks the supplied max playback rate is a valid vlaue and within supported limits</p>"},{"title":"MediaPlayerModel~_checkMinPlaybackRate","link":"<a href=\"MediaPlayerModel.html#~_checkMinPlaybackRate\">_checkMinPlaybackRate</a>","description":"<p>Checks the supplied min playback rate is a valid vlaue and within supported limits</p>"},{"title":"MediaPlayerModel~getAbrBitrateParameter","link":"<a href=\"MediaPlayerModel.html#~getAbrBitrateParameter\">getAbrBitrateParameter</a>","description":"<p>Returns the min,max or initial bitrate for a specific media type.</p>"},{"title":"MediaPlayerModel~getCatchupMaxDrift","link":"<a href=\"MediaPlayerModel.html#~getCatchupMaxDrift\">getCatchupMaxDrift</a>","description":"<p>Returns the maximum drift allowed before applying a seek back to the live edge when the catchup mode is enabled</p>"},{"title":"MediaPlayerModel~getCatchupModeEnabled","link":"<a href=\"MediaPlayerModel.html#~getCatchupModeEnabled\">getCatchupModeEnabled</a>","description":"<p>Returns whether the catchup mode is activated via the settings or internally in the PlaybackController</p>"},{"title":"MediaPlayerModel~getCatchupPlaybackRates","link":"<a href=\"MediaPlayerModel.html#~getCatchupPlaybackRates\">getCatchupPlaybackRates</a>","description":"<p>Returns the minimum and maximum playback rates to be used when applying the catchup mechanism<br>\nIf only one of the min/max values has been set then the other will default to 0 (no playback rate change).</p>"},{"title":"MediaPlayerModel~getInitialBufferLevel","link":"<a href=\"MediaPlayerModel.html#~getInitialBufferLevel\">getInitialBufferLevel</a>","description":"<p>Returns the initial buffer level taking the stable buffer time into account</p>"},{"title":"MediaPlayerModel~getRetryAttemptsForType","link":"<a href=\"MediaPlayerModel.html#~getRetryAttemptsForType\">getRetryAttemptsForType</a>","description":"<p>Returns the number of retry attempts for a specific media type</p>"},{"title":"MediaPlayerModel~getRetryIntervalsForType","link":"<a href=\"MediaPlayerModel.html#~getRetryIntervalsForType\">getRetryIntervalsForType</a>","description":"<p>Returns the retry interval for a specific media type</p>"},{"title":"MediaPlayerModel~getStableBufferTime","link":"<a href=\"MediaPlayerModel.html#~getStableBufferTime\">getStableBufferTime</a>","description":"<p>Returns the stable buffer time taking the live delay into account</p>"},{"title":"MediaSourceController~setConfig","link":"<a href=\"MediaSourceController.html#~setConfig\">setConfig</a>","description":"<p>Set the config of the MediaSourceController</p>"},{"title":"MediaType","link":"<a href=\"global.html#MediaType\">MediaType</a>","description":"<p>The media types</p>"},{"title":"MetricsReportingEvents","link":"<a href=\"MetricsReportingEvents.html\">MetricsReportingEvents</a>"},{"title":"MetricsReportingEvents#event:CMCD_DATA_GENERATED","link":"<a href=\"MetricsReportingEvents.html#event:CMCD_DATA_GENERATED\">CMCD_DATA_GENERATED</a>","description":"<p>Triggered when CMCD data was generated for a HTTP request</p>"},{"title":"MetricsReporting~createMetricsReporting","link":"<a href=\"MetricsReporting.html#~createMetricsReporting\">createMetricsReporting</a>","description":"<p>Create a MetricsCollectionController, and a DVBErrorsTranslator</p>"},{"title":"MetricsReporting~getMetricsHandlerFactory","link":"<a href=\"MetricsReporting.html#~getMetricsHandlerFactory\">getMetricsHandlerFactory</a>","description":"<p>Get the MetricsHandlerFactory to allow new handlers to be registered</p>"},{"title":"MetricsReporting~getReportingFactory","link":"<a href=\"MetricsReporting.html#~getReportingFactory\">getReportingFactory</a>","description":"<p>Get the ReportingFactory to allow new reporters to be registered</p>"},{"title":"module.exports","link":"<a href=\"module.html#.exports\">exports</a>","description":"<p>The copyright in this software is being made available under the BSD License,<br>\nincluded below. This software may be subject to other third party and contributor<br>\nrights, including patent rights, and no such rights are granted under this license.</p>\n<p>Copyright (c) 2013, Dash Industry Forum.<br>\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without modification,<br>\nare permitted provided that the following conditions are met:</p>\n<ul>\n<li>Redistributions of source code must retain the above copyright notice, this<br>\nlist of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright notice,<br>\nthis list of conditions and the following disclaimer in the documentation and/or<br>\nother materials provided with the distribution.</li>\n<li>Neither the name of Dash Industry Forum nor the names of its<br>\ncontributors may be used to endorse or promote products derived from this software<br>\nwithout specific prior written permission.</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY<br>\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<br>\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.<br>\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,<br>\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT<br>\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR<br>\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,<br>\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)<br>\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<br>\nPOSSIBILITY OF SUCH DAMAGE.</p>"},{"title":"module:DashAdapter","link":"<a href=\"module-DashAdapter.html\">DashAdapter</a>","description":"<p>The DashAdapter module can be accessed using the MediaPlayer API getDashAdapter()</p>"},{"title":"module:DashAdapter#applyPatchToManifest","link":"<a href=\"module-DashAdapter.html#applyPatchToManifest\">applyPatchToManifest</a>","description":"<p>Takes a given patch and applies it to the provided manifest, assumes patch is valid for manifest</p>"},{"title":"module:DashAdapter#areMediaInfosEqual","link":"<a href=\"module-DashAdapter.html#areMediaInfosEqual\">areMediaInfosEqual</a>","description":"<p>Compares two mediaInfo objects</p>"},{"title":"module:DashAdapter#getAdaptationForType","link":"<a href=\"module-DashAdapter.html#getAdaptationForType\">getAdaptationForType</a>","description":"<p>Returns the AdaptationSet for a given period index and a given mediaType.</p>"},{"title":"module:DashAdapter#getAllMediaInfoForType","link":"<a href=\"module-DashAdapter.html#getAllMediaInfoForType\">getAllMediaInfoForType</a>","description":"<p>Returns all the mediaInfos for a given mediaType and the corresponding streamInfo.</p>"},{"title":"module:DashAdapter#getAvailabilityStartTime","link":"<a href=\"module-DashAdapter.html#getAvailabilityStartTime\">getAvailabilityStartTime</a>","description":"<p>Returns the availabilityStartTime as specified in the manifest</p>"},{"title":"module:DashAdapter#getBandwidthForRepresentation","link":"<a href=\"module-DashAdapter.html#getBandwidthForRepresentation\">getBandwidthForRepresentation</a>","description":"<p>Returns the bandwidth for a given representation id and the corresponding period index</p>"},{"title":"module:DashAdapter#getCodec","link":"<a href=\"module-DashAdapter.html#getCodec\">getCodec</a>","description":"<p>Returns the codec for a given adaptation set and a given representation id.</p>"},{"title":"module:DashAdapter#getContentSteering","link":"<a href=\"module-DashAdapter.html#getContentSteering\">getContentSteering</a>","description":"<p>Returns the ContentSteering element of the MPD</p>"},{"title":"module:DashAdapter#getDuration","link":"<a href=\"module-DashAdapter.html#getDuration\">getDuration</a>","description":"<p>Returns the duration of the MPD</p>"},{"title":"module:DashAdapter#getIndexForRepresentation","link":"<a href=\"module-DashAdapter.html#getIndexForRepresentation\">getIndexForRepresentation</a>","description":"<p>Returns the index for a given representation id</p>"},{"title":"module:DashAdapter#getIsDynamic","link":"<a href=\"module-DashAdapter.html#getIsDynamic\">getIsDynamic</a>","description":"<p>Returns a boolean indicating if the manifest is dynamic or not</p>"},{"title":"module:DashAdapter#getIsMain","link":"<a href=\"module-DashAdapter.html#getIsMain\">getIsMain</a>","description":"<p>Checks if the role of the specified AdaptationSet is set to main</p>"},{"title":"module:DashAdapter#getIsPatch","link":"<a href=\"module-DashAdapter.html#getIsPatch\">getIsPatch</a>","description":"<p>Checks if the manifest is actually just a patch manifest</p>"},{"title":"module:DashAdapter#getIsTypeOf","link":"<a href=\"module-DashAdapter.html#getIsTypeOf\">getIsTypeOf</a>","description":"<p>Checks if the given AdaptationSet is from the given media type</p>"},{"title":"module:DashAdapter#getLocation","link":"<a href=\"module-DashAdapter.html#getLocation\">getLocation</a>","description":"<p>Returns the location element of the MPD</p>"},{"title":"module:DashAdapter#getManifestUpdatePeriod","link":"<a href=\"module-DashAdapter.html#getManifestUpdatePeriod\">getManifestUpdatePeriod</a>","description":"<p>Returns the manifest update period used for dynamic manifests</p>"},{"title":"module:DashAdapter#getMaxIndexForBufferType","link":"<a href=\"module-DashAdapter.html#getMaxIndexForBufferType\">getMaxIndexForBufferType</a>","description":"<p>This method returns the current max index based on what is defined in the MPD.</p>"},{"title":"module:DashAdapter#getMediaInfoForType","link":"<a href=\"module-DashAdapter.html#getMediaInfoForType\">getMediaInfoForType</a>","description":"<p>Returns a MediaInfo object for a given media type and the corresponding streamInfo.</p>"},{"title":"module:DashAdapter#getMpd","link":"<a href=\"module-DashAdapter.html#getMpd\">getMpd</a>","description":"<p>Returns an MPD object</p>"},{"title":"module:DashAdapter#getPatchLocation","link":"<a href=\"module-DashAdapter.html#getPatchLocation\">getPatchLocation</a>","description":"<p>Returns the patch locations of the MPD if existing and if they are still valid</p>"},{"title":"module:DashAdapter#getPeriodById","link":"<a href=\"module-DashAdapter.html#getPeriodById\">getPeriodById</a>","description":"<p>Returns the voPeriod object for a given id</p>"},{"title":"module:DashAdapter#getProducerReferenceTimes","link":"<a href=\"module-DashAdapter.html#getProducerReferenceTimes\">getProducerReferenceTimes</a>","description":"<p>Returns the ProducerReferenceTimes as saved in the DashManifestModel if present</p>"},{"title":"module:DashAdapter#getPublishTime","link":"<a href=\"module-DashAdapter.html#getPublishTime\">getPublishTime</a>","description":"<p>Returns the publish time from the manifest</p>"},{"title":"module:DashAdapter#getRealAdaptation","link":"<a href=\"module-DashAdapter.html#getRealAdaptation\">getRealAdaptation</a>","description":"<p>Returns the AdaptationSet as saved in the DashManifestModel</p>"},{"title":"module:DashAdapter#getRealPeriodByIndex","link":"<a href=\"module-DashAdapter.html#getRealPeriodByIndex\">getRealPeriodByIndex</a>","description":"<p>Returns the period as defined in the DashManifestModel for a given index</p>"},{"title":"module:DashAdapter#getRegularPeriods","link":"<a href=\"module-DashAdapter.html#getRegularPeriods\">getRegularPeriods</a>","description":"<p>Returns all periods of the MPD</p>"},{"title":"module:DashAdapter#getSuggestedPresentationDelay","link":"<a href=\"module-DashAdapter.html#getSuggestedPresentationDelay\">getSuggestedPresentationDelay</a>","description":"<p>Returns the suggestedPresentationDelay as specified in the manifest</p>"},{"title":"module:DashAdapter#getUTCTimingSources","link":"<a href=\"module-DashAdapter.html#getUTCTimingSources\">getUTCTimingSources</a>","description":"<p>Returns the UTC Timing Sources specified in the manifest</p>"},{"title":"module:DashAdapter#getVoRepresentations","link":"<a href=\"module-DashAdapter.html#getVoRepresentations\">getVoRepresentations</a>","description":"<p>Returns all voRepresentations for a given mediaInfo</p>"},{"title":"module:DashAdapter#isPatchValid","link":"<a href=\"module-DashAdapter.html#isPatchValid\">isPatchValid</a>","description":"<p>Checks if the supplied manifest is compatible for application of the supplied patch</p>"},{"title":"module:DashAdapter~DashAdapter~getEssentialPropertiesForRepresentation","link":"<a href=\"module-DashAdapter-DashAdapter.html#~getEssentialPropertiesForRepresentation\">getEssentialPropertiesForRepresentation</a>","description":"<p>Return all EssentialProperties of a Representation</p>"},{"title":"module:DashMetrics","link":"<a href=\"module-DashMetrics.html\">DashMetrics</a>","description":"<p>The DashMetrics module can be accessed using the MediaPlayer API getDashMetrics()</p>"},{"title":"module:DashMetrics#getCurrent","link":"<a href=\"module-DashMetrics.html#getCurrent\">getCurrent</a>","description":"<p>Returns the latest metrics for a given metric list and specific metric name</p>"},{"title":"module:DashMetrics#getCurrentBufferLevel","link":"<a href=\"module-DashMetrics.html#getCurrentBufferLevel\">getCurrentBufferLevel</a>","description":"<p>Returns the current buffer level for a given media type</p>"},{"title":"module:DashMetrics#getCurrentBufferState","link":"<a href=\"module-DashMetrics.html#getCurrentBufferState\">getCurrentBufferState</a>","description":"<p>Returns the current buffer state for a given media type</p>"},{"title":"module:DashMetrics#getCurrentDroppedFrames","link":"<a href=\"module-DashMetrics.html#getCurrentDroppedFrames\">getCurrentDroppedFrames</a>","description":"<p>Returns the number of dropped frames</p>"},{"title":"module:DashMetrics#getCurrentDVRInfo","link":"<a href=\"module-DashMetrics.html#getCurrentDVRInfo\">getCurrentDVRInfo</a>","description":"<p>Returns the current DVR window</p>"},{"title":"module:DashMetrics#getCurrentHttpRequest","link":"<a href=\"module-DashMetrics.html#getCurrentHttpRequest\">getCurrentHttpRequest</a>","description":"<p>Returns the latest HTTP request for a given media type</p>"},{"title":"module:DashMetrics#getCurrentManifestUpdate","link":"<a href=\"module-DashMetrics.html#getCurrentManifestUpdate\">getCurrentManifestUpdate</a>","description":"<p>Returns the current manifest update information</p>"},{"title":"module:DashMetrics#getCurrentRepresentationSwitch","link":"<a href=\"module-DashMetrics.html#getCurrentRepresentationSwitch\">getCurrentRepresentationSwitch</a>","description":"<p>Returns the latest Representation switch for a given media type</p>"},{"title":"module:DashMetrics#getCurrentSchedulingInfo","link":"<a href=\"module-DashMetrics.html#getCurrentSchedulingInfo\">getCurrentSchedulingInfo</a>","description":"<p>Returns the current scheduling info for a given media type</p>"},{"title":"module:DashMetrics#getHttpRequests","link":"<a href=\"module-DashMetrics.html#getHttpRequests\">getHttpRequests</a>","description":"<p>Returns all HTTP requests for a given media type</p>"},{"title":"module:DashMetrics#getLatestFragmentRequestHeaderValueByID","link":"<a href=\"module-DashMetrics.html#getLatestFragmentRequestHeaderValueByID\">getLatestFragmentRequestHeaderValueByID</a>","description":"<p>Returns the value for a specific request headers used in the latest fragment request</p>"},{"title":"module:DashMetrics#getLatestMPDRequestHeaderValueByID","link":"<a href=\"module-DashMetrics.html#getLatestMPDRequestHeaderValueByID\">getLatestMPDRequestHeaderValueByID</a>","description":"<p>Returns the value for a specific request headers used in the latest MPD request</p>"},{"title":"module:Debug#getLogger","link":"<a href=\"module-Debug.html#getLogger\">getLogger</a>","description":"<p>Retrieves a logger which can be used to write logging information in browser console.</p>"},{"title":"module:Debug#setCalleeNameVisible","link":"<a href=\"module-Debug.html#setCalleeNameVisible\">setCalleeNameVisible</a>","description":"<p>Prepends the callee object name, and media type if available, to each log message.</p>"},{"title":"module:Debug#setLogTimestampVisible","link":"<a href=\"module-Debug.html#setLogTimestampVisible\">setLogTimestampVisible</a>","description":"<p>Prepends a timestamp in milliseconds to each log message.</p>"},{"title":"module:DefaultURLUtils#isHTTPS","link":"<a href=\"module-DefaultURLUtils.html#isHTTPS\">isHTTPS</a>","description":"<p>Determines whether the supplied url has https scheme</p>"},{"title":"module:DefaultURLUtils#isHTTPURL","link":"<a href=\"module-DefaultURLUtils.html#isHTTPURL\">isHTTPURL</a>","description":"<p>Determines whether the url is an HTTP-URL as defined in ISO/IEC<br>\n23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https</p>"},{"title":"module:DefaultURLUtils#isPathAbsolute","link":"<a href=\"module-DefaultURLUtils.html#isPathAbsolute\">isPathAbsolute</a>","description":"<p>Determines whether the url is path-absolute.</p>"},{"title":"module:DefaultURLUtils#isRelative","link":"<a href=\"module-DefaultURLUtils.html#isRelative\">isRelative</a>","description":"<p>Determines whether the url is relative.</p>"},{"title":"module:DefaultURLUtils#isSchemeRelative","link":"<a href=\"module-DefaultURLUtils.html#isSchemeRelative\">isSchemeRelative</a>","description":"<p>Determines whether the url is scheme-relative.</p>"},{"title":"module:DefaultURLUtils#parseBaseUrl","link":"<a href=\"module-DefaultURLUtils.html#parseBaseUrl\">parseBaseUrl</a>","description":"<p>Returns a string that contains the Base URL of a URL, if determinable.</p>"},{"title":"module:DefaultURLUtils#parseOrigin","link":"<a href=\"module-DefaultURLUtils.html#parseOrigin\">parseOrigin</a>","description":"<p>Returns a string that contains the scheme and origin of a URL,<br>\nif determinable.</p>"},{"title":"module:DefaultURLUtils#parseScheme","link":"<a href=\"module-DefaultURLUtils.html#parseScheme\">parseScheme</a>","description":"<p>Returns a string that contains the scheme of a URL, if determinable.</p>"},{"title":"module:DefaultURLUtils#removeHostname","link":"<a href=\"module-DefaultURLUtils.html#removeHostname\">removeHostname</a>","description":"<p>Returns a string that contains the fragment of a URL without scheme,<br>\nif determinable.</p>"},{"title":"module:DefaultURLUtils#resolve","link":"<a href=\"module-DefaultURLUtils.html#resolve\">resolve</a>","description":"<p>Resolves a url given an optional base url</p>"},{"title":"module:ErrorHandler.error","link":"<a href=\"module-ErrorHandler.html#.error\">error</a>"},{"title":"module:FactoryMaker#deleteSingletonInstances","link":"<a href=\"module-FactoryMaker.html#deleteSingletonInstances\">deleteSingletonInstances</a>","description":"<p>Use this method to remove all singleton instances associated with a particular context.</p>"},{"title":"module:FactoryMaker#getSingletonInstance","link":"<a href=\"module-FactoryMaker.html#getSingletonInstance\">getSingletonInstance</a>","description":"<p>Use this method from your extended object.  this.factory is injected into your object.<br>\nthis.factory.getSingletonInstance(this.context, 'VideoModel')<br>\nwill return the video model for use in the extended object.</p>"},{"title":"module:FactoryMaker#setSingletonInstance","link":"<a href=\"module-FactoryMaker.html#setSingletonInstance\">setSingletonInstance</a>","description":"<p>Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.</p>"},{"title":"module:HTTPLoader#abort","link":"<a href=\"module-HTTPLoader.html#abort\">abort</a>","description":"<p>Aborts any inflight downloads</p>"},{"title":"module:HTTPLoader#load","link":"<a href=\"module-HTTPLoader.html#load\">load</a>","description":"<p>Initiates a download of the resource described by config.request</p>"},{"title":"module:MediaPlayer","link":"<a href=\"module-MediaPlayer.html\">MediaPlayer</a>","description":"<p>The MediaPlayer is the primary dash.js Module and a Facade to build your player around.<br>\nIt will allow you access to all the important dash.js properties/methods via the public API and all the<br>\nevents to build a robust DASH media player.</p>"},{"title":"module:MediaPlayer#addABRCustomRule","link":"<a href=\"module-MediaPlayer.html#addABRCustomRule\">addABRCustomRule</a>","description":"<p>Add a custom ABR Rule<br>\nRule will be apply on next stream if a stream is being played</p>"},{"title":"module:MediaPlayer#addUTCTimingSource","link":"<a href=\"module-MediaPlayer.html#addUTCTimingSource\">addUTCTimingSource</a>","description":"<p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.\nIf UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>\n<p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.\nThis will allow the date header on the manifest to be used instead of a time server</p>"},{"title":"module:MediaPlayer#attachProtectionController","link":"<a href=\"module-MediaPlayer.html#attachProtectionController\">attachProtectionController</a>","description":"<p>Will override dash.js protection controller.</p>"},{"title":"module:MediaPlayer#attachSource","link":"<a href=\"module-MediaPlayer.html#attachSource\">attachSource</a>","description":"<p>Use this method to set a source URL to a valid MPD manifest file OR<br>\na previously downloaded and parsed manifest object.  Optionally, can<br>\nalso provide protection information</p>"},{"title":"module:MediaPlayer#attachTTMLRenderingDiv","link":"<a href=\"module-MediaPlayer.html#attachTTMLRenderingDiv\">attachTTMLRenderingDiv</a>","description":"<p>Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.</p>"},{"title":"module:MediaPlayer#attachView","link":"<a href=\"module-MediaPlayer.html#attachView\">attachView</a>","description":"<p>Use this method to attach an HTML5 VideoElement for dash.js to operate upon.</p>"},{"title":"module:MediaPlayer#clearDefaultUTCTimingSources","link":"<a href=\"module-MediaPlayer.html#clearDefaultUTCTimingSources\">clearDefaultUTCTimingSources</a>","description":"<p>Allows you to clear the stored array of time sources.</p>\n<p>Example use: If you have exposed the Date header, calling this method\nwill allow the date header on the manifest to be used instead of the time server.</p>\n<p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back\nto using a binary search to discover the live edge</p>"},{"title":"module:MediaPlayer#convertToTimeCode","link":"<a href=\"module-MediaPlayer.html#convertToTimeCode\">convertToTimeCode</a>","description":"<p>A utility method which converts seconds into TimeCode (i.e. 300 --&gt; 05:00).</p>"},{"title":"module:MediaPlayer#destroy","link":"<a href=\"module-MediaPlayer.html#destroy\">destroy</a>","description":"<p>Completely destroys the media player and frees all memory.</p>"},{"title":"module:MediaPlayer#duration","link":"<a href=\"module-MediaPlayer.html#duration\">duration</a>","description":"<p>Duration of the media's playback, in seconds.</p>"},{"title":"module:MediaPlayer#durationAsUTC","link":"<a href=\"module-MediaPlayer.html#durationAsUTC\">durationAsUTC</a>","description":"<p>Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.<br>\nNote - this property only has meaning for live streams.</p>"},{"title":"module:MediaPlayer#enableForcedTextStreaming","link":"<a href=\"module-MediaPlayer.html#enableForcedTextStreaming\">enableForcedTextStreaming</a>","description":"<p>Enable/disable text<br>\nWhen enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode &quot;hidden&quot;</p>"},{"title":"module:MediaPlayer#enableText","link":"<a href=\"module-MediaPlayer.html#enableText\">enableText</a>","description":"<p>Enable/disable text<br>\nWhen enabling text, dash will choose the previous selected text track</p>"},{"title":"module:MediaPlayer#extend","link":"<a href=\"module-MediaPlayer.html#extend\">extend</a>","description":"<p>This method should be used to extend or replace internal dash.js objects.<br>\nThere are two ways to extend dash.js (determined by the override argument):</p>\n<ol>\n<li>If you set override to true any public method or property in your custom object will\noverride the dash.js parent object's property(ies) and will be used instead but the\ndash.js parent module will still be created.</li>\n<li>If you set override to false your object will completely replace the dash.js object.\n(Note: This is how it was in 1.x of Dash.js with Dijon).</li>\n</ol>\n<b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>\n<ul>\n<li><b>this.context</b> - can be used to pass context for singleton access.</li>\n<li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>\n<li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>\n</ul>\n<b>You must call extend before you call initialize</b>"},{"title":"module:MediaPlayer#formatUTC","link":"<a href=\"module-MediaPlayer.html#formatUTC\">formatUTC</a>","description":"<p>A utility methods which converts UTC timestamp value into a valid time and date string.</p>"},{"title":"module:MediaPlayer#getActiveStream","link":"<a href=\"module-MediaPlayer.html#getActiveStream\">getActiveStream</a>","description":"<p>This method returns the active stream</p>"},{"title":"module:MediaPlayer#getAutoPlay","link":"<a href=\"module-MediaPlayer.html#getAutoPlay\">getAutoPlay</a>"},{"title":"module:MediaPlayer#getAverageThroughput","link":"<a href=\"module-MediaPlayer.html#getAverageThroughput\">getAverageThroughput</a>","description":"<p>Returns the average throughput computed in the ABR logic</p>"},{"title":"module:MediaPlayer#getBitrateInfoListFor","link":"<a href=\"module-MediaPlayer.html#getBitrateInfoListFor\">getBitrateInfoListFor</a>"},{"title":"module:MediaPlayer#getBufferLength","link":"<a href=\"module-MediaPlayer.html#getBufferLength\">getBufferLength</a>","description":"<p>The length of the buffer for a given media type, in seconds. Valid media<br>\ntypes are &quot;video&quot;, &quot;audio&quot; and &quot;text&quot;. If no type is passed<br>\nin, then the minimum of video, audio and text buffer length is<br>\nreturned. NaN is returned if an invalid type is requested, the<br>\npresentation does not contain that type, or if no arguments are passed<br>\nand the presentation does not include any adaption sets of valid media<br>\ntype.</p>"},{"title":"module:MediaPlayer#getCurrentLiveLatency","link":"<a href=\"module-MediaPlayer.html#getCurrentLiveLatency\">getCurrentLiveLatency</a>"},{"title":"module:MediaPlayer#getCurrentTrackFor","link":"<a href=\"module-MediaPlayer.html#getCurrentTrackFor\">getCurrentTrackFor</a>"},{"title":"module:MediaPlayer#getDashAdapter","link":"<a href=\"module-MediaPlayer.html#getDashAdapter\">getDashAdapter</a>","description":"<p>Returns the DashAdapter.js Module.</p>"},{"title":"module:MediaPlayer#getDashMetrics","link":"<a href=\"module-MediaPlayer.html#getDashMetrics\">getDashMetrics</a>","description":"<p>Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics<br>\nstored in dash.js</p>"},{"title":"module:MediaPlayer#getDebug","link":"<a href=\"module-MediaPlayer.html#getDebug\">getDebug</a>","description":"<p>Use this method to access the dash.js logging class.</p>"},{"title":"module:MediaPlayer#getDVRSeekOffset","link":"<a href=\"module-MediaPlayer.html#getDVRSeekOffset\">getDVRSeekOffset</a>","description":"<p>This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).<br>\nNOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method<br>\nwhich will calculate this value for you and set the video element's currentTime property all in one simple call.</p>"},{"title":"module:MediaPlayer#getDVRWindowSize","link":"<a href=\"module-MediaPlayer.html#getDVRWindowSize\">getDVRWindowSize</a>","description":"<p>The timeShiftBufferLength (DVR Window), in seconds.</p>"},{"title":"module:MediaPlayer#getInitialMediaSettingsFor","link":"<a href=\"module-MediaPlayer.html#getInitialMediaSettingsFor\">getInitialMediaSettingsFor</a>","description":"<p>This method returns media settings that is used to pick the initial track. Format of the settings<br>\nis following:<br>\n{lang: langValue,<br>\nindex: indexValue,<br>\nviewpoint: viewpointValue,<br>\naudioChannelConfiguration: audioChannelConfigurationValue,<br>\naccessibility: accessibilityValue,<br>\nrole: roleValue}</p>"},{"title":"module:MediaPlayer#getLowLatencyModeEnabled","link":"<a href=\"module-MediaPlayer.html#getLowLatencyModeEnabled\">getLowLatencyModeEnabled</a>","description":"<p>Returns a boolean that indicates whether the player is operating in low latency mode.</p>"},{"title":"module:MediaPlayer#getOfflineController","link":"<a href=\"module-MediaPlayer.html#getOfflineController\">getOfflineController</a>","description":"<p>Detects if Offline is included and returns an instance of OfflineController.js</p>"},{"title":"module:MediaPlayer#getPlaybackRate","link":"<a href=\"module-MediaPlayer.html#getPlaybackRate\">getPlaybackRate</a>","description":"<p>Returns the current playback rate.</p>"},{"title":"module:MediaPlayer#getProtectionController","link":"<a href=\"module-MediaPlayer.html#getProtectionController\">getProtectionController</a>","description":"<p>Detects if Protection is included and returns an instance of ProtectionController.js</p>"},{"title":"module:MediaPlayer#getQualityFor","link":"<a href=\"module-MediaPlayer.html#getQualityFor\">getQualityFor</a>","description":"<p>Gets the current download quality for media type video, audio or images. For video and audio types the ABR<br>\nrules update this value before every new download unless autoSwitchBitrate is set to false. For 'image'<br>\ntype, thumbnails, there is no ABR algorithm and quality is set manually.</p>"},{"title":"module:MediaPlayer#getSettings","link":"<a href=\"module-MediaPlayer.html#getSettings\">getSettings</a>","description":"<p>Get the current settings object being used on the player.</p>"},{"title":"module:MediaPlayer#getSource","link":"<a href=\"module-MediaPlayer.html#getSource\">getSource</a>","description":"<p>Returns the source string or manifest that was attached by calling attachSource()</p>"},{"title":"module:MediaPlayer#getStreamsFromManifest","link":"<a href=\"module-MediaPlayer.html#getStreamsFromManifest\">getStreamsFromManifest</a>","description":"<p>This method returns the list of all available streams from a given manifest</p>"},{"title":"module:MediaPlayer#getTargetLiveDelay","link":"<a href=\"module-MediaPlayer.html#getTargetLiveDelay\">getTargetLiveDelay</a>","description":"<p>Returns the target live delay</p>"},{"title":"module:MediaPlayer#getTopBitrateInfoFor","link":"<a href=\"module-MediaPlayer.html#getTopBitrateInfoFor\">getTopBitrateInfoFor</a>","description":"<p>Gets the top quality BitrateInfo checking portal limit and max allowed.<br>\nIt calls getMaxAllowedIndexFor internally</p>"},{"title":"module:MediaPlayer#getTracksFor","link":"<a href=\"module-MediaPlayer.html#getTracksFor\">getTracksFor</a>","description":"<p>This method returns the list of all available tracks for a given media type</p>"},{"title":"module:MediaPlayer#getTracksForTypeFromManifest","link":"<a href=\"module-MediaPlayer.html#getTracksForTypeFromManifest\">getTracksForTypeFromManifest</a>","description":"<p>This method returns the list of all available tracks for a given media type and streamInfo from a given manifest</p>"},{"title":"module:MediaPlayer#getTTMLRenderingDiv","link":"<a href=\"module-MediaPlayer.html#getTTMLRenderingDiv\">getTTMLRenderingDiv</a>","description":"<p>Returns instance of Div that was attached by calling attachTTMLRenderingDiv()</p>"},{"title":"module:MediaPlayer#getVersion","link":"<a href=\"module-MediaPlayer.html#getVersion\">getVersion</a>","description":"<p>Current version of Dash.js</p>"},{"title":"module:MediaPlayer#getVideoElement","link":"<a href=\"module-MediaPlayer.html#getVideoElement\">getVideoElement</a>","description":"<p>Returns instance of Video Element that was attached by calling attachView()</p>"},{"title":"module:MediaPlayer#getVolume","link":"<a href=\"module-MediaPlayer.html#getVolume\">getVolume</a>","description":"<p>Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).</p>"},{"title":"module:MediaPlayer#getXHRWithCredentialsForType","link":"<a href=\"module-MediaPlayer.html#getXHRWithCredentialsForType\">getXHRWithCredentialsForType</a>","description":"<p>Gets whether withCredentials on XHR requests for a particular request<br>\ntype is true or false</p>"},{"title":"module:MediaPlayer#initialize","link":"<a href=\"module-MediaPlayer.html#initialize\">initialize</a>","description":"<p>Upon creating the MediaPlayer you must call initialize before you call anything else.<br>\nThere is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}<br>\nwith all your extensions prior to calling initialize.</p>\n<p>ALL arguments are optional and there are individual methods to set each argument later on.<br>\nThe args in this method are just for convenience and should only be used for a simple player setup.</p>"},{"title":"module:MediaPlayer#isDynamic","link":"<a href=\"module-MediaPlayer.html#isDynamic\">isDynamic</a>","description":"<p>Returns a Boolean that indicates whether the media is in the process of dynamic.</p>"},{"title":"module:MediaPlayer#isMuted","link":"<a href=\"module-MediaPlayer.html#isMuted\">isMuted</a>","description":"<p>A Boolean that determines whether audio is muted.</p>"},{"title":"module:MediaPlayer#isPaused","link":"<a href=\"module-MediaPlayer.html#isPaused\">isPaused</a>","description":"<p>Returns a Boolean that indicates whether the Video Element is paused.</p>"},{"title":"module:MediaPlayer#isReady","link":"<a href=\"module-MediaPlayer.html#isReady\">isReady</a>","description":"<p>The ready state of the MediaPlayer based on both the video element and MPD source being defined.</p>"},{"title":"module:MediaPlayer#isSeeking","link":"<a href=\"module-MediaPlayer.html#isSeeking\">isSeeking</a>","description":"<p>Returns a Boolean that indicates whether the media is in the process of seeking to a new position.</p>"},{"title":"module:MediaPlayer#isTextEnabled","link":"<a href=\"module-MediaPlayer.html#isTextEnabled\">isTextEnabled</a>","description":"<p>Return if text is enabled</p>"},{"title":"module:MediaPlayer#off","link":"<a href=\"module-MediaPlayer.html#off\">off</a>","description":"<p>Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}</p>"},{"title":"module:MediaPlayer#on","link":"<a href=\"module-MediaPlayer.html#on\">on</a>","description":"<p>Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}</p>"},{"title":"module:MediaPlayer#pause","link":"<a href=\"module-MediaPlayer.html#pause\">pause</a>","description":"<p>This method will call pause on the native Video Element.</p>"},{"title":"module:MediaPlayer#play","link":"<a href=\"module-MediaPlayer.html#play\">play</a>","description":"<p>The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.<br>\nThis method will call play on the native Video Element.</p>"},{"title":"module:MediaPlayer#preload","link":"<a href=\"module-MediaPlayer.html#preload\">preload</a>","description":"<p>Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}<br>\nmethod in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.<br>\nWhen a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.</p>"},{"title":"module:MediaPlayer#provideThumbnail","link":"<a href=\"module-MediaPlayer.html#provideThumbnail\">provideThumbnail</a>","description":"<p>Provide the thumbnail at time position. This can be asynchronous, so you must provide a callback ro retrieve thumbnails informations</p>"},{"title":"module:MediaPlayer#refreshManifest","link":"<a href=\"module-MediaPlayer.html#refreshManifest\">refreshManifest</a>","description":"<p>Reload the manifest that the player is currently using.</p>"},{"title":"module:MediaPlayer#registerCustomCapabilitiesFilter","link":"<a href=\"module-MediaPlayer.html#registerCustomCapabilitiesFilter\">registerCustomCapabilitiesFilter</a>","description":"<p>Registers a custom capabilities filter. This enables application to filter representations to use.<br>\nThe provided callback function shall return a boolean based on whether or not to use the representation.<br>\nThe filters are applied in the order they are registered.</p>"},{"title":"module:MediaPlayer#registerLicenseRequestFilter","link":"<a href=\"module-MediaPlayer.html#registerLicenseRequestFilter\">registerLicenseRequestFilter</a>","description":"<p>Registers a license request filter. This enables application to manipulate/overwrite any request parameter and/or request data.<br>\nThe provided callback function shall return a promise that shall be resolved once the filter process is completed.<br>\nThe filters are applied in the order they are registered.</p>"},{"title":"module:MediaPlayer#registerLicenseResponseFilter","link":"<a href=\"module-MediaPlayer.html#registerLicenseResponseFilter\">registerLicenseResponseFilter</a>","description":"<p>Registers a license response filter. This enables application to manipulate/overwrite the response data<br>\nThe provided callback function shall return a promise that shall be resolved once the filter process is completed.<br>\nThe filters are applied in the order they are registered.</p>"},{"title":"module:MediaPlayer#removeABRCustomRule","link":"<a href=\"module-MediaPlayer.html#removeABRCustomRule\">removeABRCustomRule</a>","description":"<p>Remove a custom ABR Rule</p>"},{"title":"module:MediaPlayer#removeAllABRCustomRule","link":"<a href=\"module-MediaPlayer.html#removeAllABRCustomRule\">removeAllABRCustomRule</a>","description":"<p>Remove all ABR custom rules</p>"},{"title":"module:MediaPlayer#removeUTCTimingSource","link":"<a href=\"module-MediaPlayer.html#removeUTCTimingSource\">removeUTCTimingSource</a>","description":"<p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the\nentry to be removed from the array</p>"},{"title":"module:MediaPlayer#reset","link":"<a href=\"module-MediaPlayer.html#reset\">reset</a>","description":"<p>Sets the MPD source and the video element to null. You can also reset the MediaPlayer by<br>\ncalling attachSource with a new source file.</p>\n<p>This call does not destroy the MediaPlayer. To destroy the MediaPlayer and free all of its<br>\nmemory, call destroy().</p>"},{"title":"module:MediaPlayer#resetSettings","link":"<a href=\"module-MediaPlayer.html#resetSettings\">resetSettings</a>","description":"<p>Resets the settings object back to the default.</p>"},{"title":"module:MediaPlayer#restoreDefaultUTCTimingSources","link":"<a href=\"module-MediaPlayer.html#restoreDefaultUTCTimingSources\">restoreDefaultUTCTimingSources</a>","description":"<p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>"},{"title":"module:MediaPlayer#retrieveManifest","link":"<a href=\"module-MediaPlayer.html#retrieveManifest\">retrieveManifest</a>","description":"<p>Allows application to retrieve a manifest.  Manifest loading is asynchronous and requires the app-provided callback function</p>"},{"title":"module:MediaPlayer#seek","link":"<a href=\"module-MediaPlayer.html#seek\">seek</a>","description":"<p>Sets the currentTime property of the attached video element.  If it is a live stream with a<br>\ntimeShiftBufferLength, then the DVR window offset will be automatically calculated.</p>"},{"title":"module:MediaPlayer#setAutoPlay","link":"<a href=\"module-MediaPlayer.html#setAutoPlay\">setAutoPlay</a>","description":"<p>Set to false to prevent stream from auto-playing when the view is attached.</p>"},{"title":"module:MediaPlayer#setConfig","link":"<a href=\"module-MediaPlayer.html#setConfig\">setConfig</a>","description":"<p>Configure media player with customs controllers. Helpful for tests</p>"},{"title":"module:MediaPlayer#setCurrentTrack","link":"<a href=\"module-MediaPlayer.html#setCurrentTrack\">setCurrentTrack</a>"},{"title":"module:MediaPlayer#setInitialMediaSettingsFor","link":"<a href=\"module-MediaPlayer.html#setInitialMediaSettingsFor\">setInitialMediaSettingsFor</a>","description":"<p>This method allows to set media settings that will be used to pick the initial track. Format of the settings<br>\nis following: <br /><br>\n{lang: langValue (can be either a string primitive, a string object, or a RegExp object to match),<br>\nindex: indexValue,<br>\nviewpoint: viewpointValue,<br>\naudioChannelConfiguration: audioChannelConfigurationValue,<br>\naccessibility: accessibilityValue,<br>\nrole: roleValue}</p>"},{"title":"module:MediaPlayer#setMute","link":"<a href=\"module-MediaPlayer.html#setMute\">setMute</a>","description":"<p>Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.</p>"},{"title":"module:MediaPlayer#setPlaybackRate","link":"<a href=\"module-MediaPlayer.html#setPlaybackRate\">setPlaybackRate</a>","description":"<p>Use this method to set the native Video Element's playback rate.</p>"},{"title":"module:MediaPlayer#setProtectionData","link":"<a href=\"module-MediaPlayer.html#setProtectionData\">setProtectionData</a>","description":"<p>Sets Protection Data required to setup the Protection Module (DRM). Protection Data must<br>\nbe set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.</p>"},{"title":"module:MediaPlayer#setQualityFor","link":"<a href=\"module-MediaPlayer.html#setQualityFor\">setQualityFor</a>","description":"<p>Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.<br>\nThis value will be overwritten by the ABR rules unless autoSwitchBitrate is set to false.</p>"},{"title":"module:MediaPlayer#setTextTrack","link":"<a href=\"module-MediaPlayer.html#setTextTrack\">setTextTrack</a>","description":"<p>Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to<br>\nset the track mode on the video object to switch a track when using this method.</p>"},{"title":"module:MediaPlayer#setVolume","link":"<a href=\"module-MediaPlayer.html#setVolume\">setVolume</a>","description":"<p>A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).</p>"},{"title":"module:MediaPlayer#setXHRWithCredentialsForType","link":"<a href=\"module-MediaPlayer.html#setXHRWithCredentialsForType\">setXHRWithCredentialsForType</a>","description":"<p>Sets whether withCredentials on XHR requests for a particular request<br>\ntype is true or false</p>"},{"title":"module:MediaPlayer#time","link":"<a href=\"module-MediaPlayer.html#time\">time</a>","description":"<p>Current time of the playhead, in seconds.</p>\n<p>If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.<br>\nHowever if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.</p>"},{"title":"module:MediaPlayer#timeAsUTC","link":"<a href=\"module-MediaPlayer.html#timeAsUTC\">timeAsUTC</a>","description":"<p>Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.<br>\nNote - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.</p>"},{"title":"module:MediaPlayer#unregisterCustomCapabilitiesFilter","link":"<a href=\"module-MediaPlayer.html#unregisterCustomCapabilitiesFilter\">unregisterCustomCapabilitiesFilter</a>","description":"<p>Unregisters a custom capabilities filter.</p>"},{"title":"module:MediaPlayer#unregisterLicenseRequestFilter","link":"<a href=\"module-MediaPlayer.html#unregisterLicenseRequestFilter\">unregisterLicenseRequestFilter</a>","description":"<p>Unregisters a license request filter.</p>"},{"title":"module:MediaPlayer#unregisterLicenseResponseFilter","link":"<a href=\"module-MediaPlayer.html#unregisterLicenseResponseFilter\">unregisterLicenseResponseFilter</a>","description":"<p>Unregisters a license response filter.</p>"},{"title":"module:MediaPlayer#updatePortalSize","link":"<a href=\"module-MediaPlayer.html#updatePortalSize\">updatePortalSize</a>","description":"<p>Update the video element size variables<br>\nShould be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.</p>\n<p>Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.</p>"},{"title":"module:MediaPlayer#updateSettings","link":"<a href=\"module-MediaPlayer.html#updateSettings\">updateSettings</a>","description":"<p>This function does not update the entire object, only properties in the passed in object are updated.</p>\n<p>This means that updateSettings({a: x}) and updateSettings({b: y}) are functionally equivalent to<br>\nupdateSettings({a: x, b: y}). If the default values are required again, @see{@link resetSettings}.</p>"},{"title":"module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR","link":"<a href=\"module-MediaPlayer.html#~ELEMENT_NOT_ATTACHED_ERROR\">ELEMENT_NOT_ATTACHED_ERROR</a>","description":"<p>error string thrown when a function is called before the dash.js has received a reference of an HTML5 video element</p>"},{"title":"module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR","link":"<a href=\"module-MediaPlayer.html#~MEDIA_PLAYER_NOT_INITIALIZED_ERROR\">MEDIA_PLAYER_NOT_INITIALIZED_ERROR</a>","description":"<p>error string thrown when a function is called before the dash.js has been fully initialized.</p>"},{"title":"module:MediaPlayer~MediaPlayer~getABRCustomRules","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~getABRCustomRules\">getABRCustomRules</a>","description":"<p>Returns all ABR custom rules</p>"},{"title":"module:MediaPlayer~MediaPlayer~getAvailableBaseUrls","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~getAvailableBaseUrls\">getAvailableBaseUrls</a>","description":"<p>Returns all BaseURLs that are available including synthesized elements (e.g by content steering)</p>"},{"title":"module:MediaPlayer~MediaPlayer~getAvailableLocations","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~getAvailableLocations\">getAvailableLocations</a>","description":"<p>Returns the available location elements including synthesized elements (e.g by content steering)</p>"},{"title":"module:MediaPlayer~MediaPlayer~getCurrentSteeringResponseData","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~getCurrentSteeringResponseData\">getCurrentSteeringResponseData</a>","description":"<p>Returns the current response data of the content steering server</p>"},{"title":"module:MediaPlayer~MediaPlayer~resetCustomInitialTrackSelectionFunction","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~resetCustomInitialTrackSelectionFunction\">resetCustomInitialTrackSelectionFunction</a>","description":"<p>Resets the custom initial track selection</p>"},{"title":"module:MediaPlayer~MediaPlayer~seekToOriginalLive","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~seekToOriginalLive\">seekToOriginalLive</a>","description":"<p>Seeks back to the original live edge (live edge as calculated at playback start). Only applies to live streams, for VoD streams this call will be ignored.</p>"},{"title":"module:MediaPlayer~MediaPlayer~setCustomInitialTrackSelectionFunction","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~setCustomInitialTrackSelectionFunction\">setCustomInitialTrackSelectionFunction</a>","description":"<p>Registers a custom initial track selection function. Only one function is allowed. Calling this method will overwrite a potentially existing function.</p>"},{"title":"module:MediaPlayer~MediaPlayer~triggerSteeringRequest","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~triggerSteeringRequest\">triggerSteeringRequest</a>","description":"<p>Triggers a request to the content steering server to update the steering information.</p>"},{"title":"module:MediaPlayer~MediaPlayer~updateSource","link":"<a href=\"module-MediaPlayer-MediaPlayer.html#~updateSource\">updateSource</a>","description":"<p>Sets the source to a new manifest URL or object without reloading<br>\nUseful for updating CDN tokens</p>"},{"title":"module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR","link":"<a href=\"module-MediaPlayer.html#~PLAYBACK_NOT_INITIALIZED_ERROR\">PLAYBACK_NOT_INITIALIZED_ERROR</a>","description":"<p>error string thrown when a function is called before the dash.js has been fully initialized</p>"},{"title":"module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR","link":"<a href=\"module-MediaPlayer.html#~SOURCE_NOT_ATTACHED_ERROR\">SOURCE_NOT_ATTACHED_ERROR</a>","description":"<p>error string thrown when a function is called before the dash.js has received a valid source stream.</p>"},{"title":"module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR","link":"<a href=\"module-MediaPlayer.html#~STREAMING_NOT_INITIALIZED_ERROR\">STREAMING_NOT_INITIALIZED_ERROR</a>","description":"<p>error string thrown when a function is called before the dash.js has been fully initialized</p>"},{"title":"module:ObjectUtils#areEqual","link":"<a href=\"module-ObjectUtils.html#areEqual\">areEqual</a>","description":"<p>Returns true if objects are equal</p>"},{"title":"module:OfflineController","link":"<a href=\"module-OfflineController.html\">OfflineController</a>","description":"<p>Provides access to offline stream recording and playback functionality. This module can be accessed using the MediaPlayer API getOfflineController()</p>"},{"title":"module:OfflineController.loadRecordsFromStorage","link":"<a href=\"module-OfflineController.html#.loadRecordsFromStorage\">loadRecordsFromStorage</a>","description":"<p>Loads records from storage<br>\nThis methods has to be called first, to be sure that all downloads have been loaded</p>"},{"title":"module:OfflineController#createRecord","link":"<a href=\"module-OfflineController.html#createRecord\">createRecord</a>","description":"<p>Create a new content record in storage and download manifest from url</p>"},{"title":"module:OfflineController#deleteRecord","link":"<a href=\"module-OfflineController.html#deleteRecord\">deleteRecord</a>","description":"<p>Deletes a record from storage</p>"},{"title":"module:OfflineController#getAllRecords","link":"<a href=\"module-OfflineController.html#getAllRecords\">getAllRecords</a>","description":"<p>Get all records from storage</p>"},{"title":"module:OfflineController#getRecordProgression","link":"<a href=\"module-OfflineController.html#getRecordProgression\">getRecordProgression</a>","description":"<p>Get download progression of a record</p>"},{"title":"module:OfflineController#resetRecords","link":"<a href=\"module-OfflineController.html#resetRecords\">resetRecords</a>","description":"<p>Reset all records</p>"},{"title":"module:OfflineController#resumeRecord","link":"<a href=\"module-OfflineController.html#resumeRecord\">resumeRecord</a>","description":"<p>Resume downloading of the record</p>"},{"title":"module:OfflineController#startRecord","link":"<a href=\"module-OfflineController.html#startRecord\">startRecord</a>","description":"<p>Start downloading the record with selected tracks representations</p>"},{"title":"module:OfflineController#stopRecord","link":"<a href=\"module-OfflineController.html#stopRecord\">stopRecord</a>","description":"<p>Stop downloading of the record</p>"},{"title":"module:OfflineController~OfflineController~reset","link":"<a href=\"module-OfflineController-OfflineController.html#~reset\">reset</a>","description":"<p>Reset</p>"},{"title":"module:ProtectionController","link":"<a href=\"module-ProtectionController.html\">ProtectionController</a>","description":"<p>Provides access to media protection information and functionality.  Each<br>\nProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}<br>\nwhich encapsulates a set of protection information (EME APIs, selected key system,<br>\nkey sessions).  The APIs of ProtectionController mostly align with the latest EME<br>\nAPIs.  Key system selection is mostly automated when combined with app-overrideable<br>\nfunctionality provided in {@link ProtectionKeyController}.</p>"},{"title":"module:ProtectionController#handleKeySystemFromManifest","link":"<a href=\"module-ProtectionController.html#handleKeySystemFromManifest\">handleKeySystemFromManifest</a>","description":"<p>Once all mediaInfo objects have been added to our mediaInfoArray we can select a key system or check if the kid has changed and we need to trigger a new license request</p>"},{"title":"module:ProtectionController#initializeForMedia","link":"<a href=\"module-ProtectionController.html#initializeForMedia\">initializeForMedia</a>","description":"<p>Initialize this protection system for a given media type.</p>"},{"title":"module:ProtectionController#setMediaElement","link":"<a href=\"module-ProtectionController.html#setMediaElement\">setMediaElement</a>","description":"<p>Associate this protection system with the given HTMLMediaElement.  This<br>\ncauses the system to register for needkey/encrypted events from the given<br>\nelement and provides a destination for setting of MediaKeys</p>"},{"title":"module:ProtectionController#setRobustnessLevel","link":"<a href=\"module-ProtectionController.html#setRobustnessLevel\">setRobustnessLevel</a>","description":"<p>Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.<br>\nPossible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.</p>"},{"title":"module:ProtectionController#setServerCertificate","link":"<a href=\"module-ProtectionController.html#setServerCertificate\">setServerCertificate</a>","description":"<p>Sets a server certificate for use by the CDM when signing key messages<br>\nintended for a particular license server.  This will fire<br>\nan error event if a key system has not yet been selected.</p>"},{"title":"module:ProtectionController#setSessionType","link":"<a href=\"module-ProtectionController.html#setSessionType\">setSessionType</a>","description":"<p>Sets the session type to use when creating key sessions.  Either &quot;temporary&quot; or<br>\n&quot;persistent-license&quot;.  Default is &quot;temporary&quot;.</p>"},{"title":"module:ProtectionController#stop","link":"<a href=\"module-ProtectionController.html#stop\">stop</a>","description":"<p>Stop method is called when current playback is stopped/resetted.</p>"},{"title":"module:ProtectionController~ProtectionController~clearMediaInfoArray","link":"<a href=\"module-ProtectionController-ProtectionController.html#~clearMediaInfoArray\">clearMediaInfoArray</a>","description":"<p>Removes all entries from the mediaInfoArr</p>"},{"title":"module:ProtectionController~ProtectionController~getKeySystems","link":"<a href=\"module-ProtectionController-ProtectionController.html#~getKeySystems\">getKeySystems</a>","description":"<p>Returns all available key systems</p>"},{"title":"module:ProtectionController~ProtectionController~setKeySystems","link":"<a href=\"module-ProtectionController-ProtectionController.html#~setKeySystems\">setKeySystems</a>","description":"<p>Sets all available key systems</p>"},{"title":"module:ProtectionKeyController#getKeySystemBySystemString","link":"<a href=\"module-ProtectionKeyController.html#getKeySystemBySystemString\">getKeySystemBySystemString</a>","description":"<p>Returns the key system associated with the given key system string<br>\nname (i.e. 'org.w3.clearkey')</p>"},{"title":"module:ProtectionKeyController#getKeySystems","link":"<a href=\"module-ProtectionKeyController.html#getKeySystems\">getKeySystems</a>","description":"<p>Returns a prioritized list of key systems supported<br>\nby this player (not necessarily those supported by the<br>\nuser agent)</p>"},{"title":"module:ProtectionKeyController#getLicenseServerModelInstance","link":"<a href=\"module-ProtectionKeyController.html#getLicenseServerModelInstance\">getLicenseServerModelInstance</a>","description":"<p>Returns the license server implementation data that should be used for this request.</p>"},{"title":"module:ProtectionKeyController#getSupportedKeySystemsFromContentProtection","link":"<a href=\"module-ProtectionKeyController.html#getSupportedKeySystemsFromContentProtection\">getSupportedKeySystemsFromContentProtection</a>","description":"<p>Returns a set of supported key systems and CENC initialization data<br>\nfrom the given array of ContentProtection elements.  Only<br>\nkey systems that are supported by this player will be returned.<br>\nKey systems are returned in priority order (highest first).</p>"},{"title":"module:ProtectionKeyController#getSupportedKeySystemsFromSegmentPssh","link":"<a href=\"module-ProtectionKeyController.html#getSupportedKeySystemsFromSegmentPssh\">getSupportedKeySystemsFromSegmentPssh</a>","description":"<p>Returns key systems supported by this player for the given PSSH<br>\ninitializationData. Key systems are returned in priority order<br>\n(highest priority first)</p>"},{"title":"module:ProtectionKeyController#initDataEquals","link":"<a href=\"module-ProtectionKeyController.html#initDataEquals\">initDataEquals</a>","description":"<p>Check equality of initData array buffers.</p>"},{"title":"module:ProtectionKeyController#isClearKey","link":"<a href=\"module-ProtectionKeyController.html#isClearKey\">isClearKey</a>","description":"<p>Determines whether the given key system is ClearKey.  This is<br>\nnecessary because the EME spec defines ClearKey and its method<br>\nfor providing keys to the key session; and this method has changed<br>\nbetween the various API versions.  Our EME-specific ProtectionModels<br>\nmust know if the system is ClearKey so that it can format the keys<br>\naccording to the particular spec version.</p>"},{"title":"module:ProtectionKeyController#processClearKeyLicenseRequest","link":"<a href=\"module-ProtectionKeyController.html#processClearKeyLicenseRequest\">processClearKeyLicenseRequest</a>","description":"<p>Allows application-specific retrieval of ClearKey keys.</p>"},{"title":"module:ProtectionKeyController#setKeySystems","link":"<a href=\"module-ProtectionKeyController.html#setKeySystems\">setKeySystems</a>","description":"<p>Sets the prioritized list of key systems to be supported<br>\nby this player.</p>"},{"title":"module:Settings","link":"<a href=\"module-Settings.html\">Settings</a>","description":"<p>Define the configuration parameters of Dash.js MediaPlayer.</p>"},{"title":"module:Settings~AbandonRequestRuleParameters","link":"<a href=\"module-Settings.html#~AbandonRequestRuleParameters\">AbandonRequestRuleParameters</a>"},{"title":"module:Settings~AbrRulesParameters","link":"<a href=\"module-Settings.html#~AbrRulesParameters\">AbrRulesParameters</a>"},{"title":"module:Settings~AbrSettings","link":"<a href=\"module-Settings.html#~AbrSettings\">AbrSettings</a>"},{"title":"module:Settings~AudioVideoSettings","link":"<a href=\"module-Settings.html#~AudioVideoSettings\">AudioVideoSettings</a>"},{"title":"module:Settings~Buffer","link":"<a href=\"module-Settings.html#~Buffer\">Buffer</a>"},{"title":"module:Settings~CachingInfoSettings","link":"<a href=\"module-Settings.html#~CachingInfoSettings\">CachingInfoSettings</a>"},{"title":"module:Settings~Capabilities","link":"<a href=\"module-Settings.html#~Capabilities\">Capabilities</a>"},{"title":"module:Settings~CmcdSettings","link":"<a href=\"module-Settings.html#~CmcdSettings\">CmcdSettings</a>"},{"title":"module:Settings~CmsdAbrSettings","link":"<a href=\"module-Settings.html#~CmsdAbrSettings\">CmsdAbrSettings</a>"},{"title":"module:Settings~CmsdSettings","link":"<a href=\"module-Settings.html#~CmsdSettings\">CmsdSettings</a>"},{"title":"module:Settings~DebugSettings","link":"<a href=\"module-Settings.html#~DebugSettings\">DebugSettings</a>"},{"title":"module:Settings~ErrorSettings","link":"<a href=\"module-Settings.html#~ErrorSettings\">ErrorSettings</a>"},{"title":"module:Settings~Gaps","link":"<a href=\"module-Settings.html#~Gaps\">Gaps</a>"},{"title":"module:Settings~LiveCatchupSettings","link":"<a href=\"module-Settings.html#~LiveCatchupSettings\">LiveCatchupSettings</a>"},{"title":"module:Settings~LiveDelay","link":"<a href=\"module-Settings.html#~LiveDelay\">LiveDelay</a>"},{"title":"module:Settings~Metrics","link":"<a href=\"module-Settings.html#~Metrics\">Metrics</a>"},{"title":"module:Settings~PlayerSettings","link":"<a href=\"module-Settings.html#~PlayerSettings\">PlayerSettings</a>"},{"title":"module:Settings~Protection","link":"<a href=\"module-Settings.html#~Protection\">Protection</a>"},{"title":"module:Settings~RequestTypeSettings","link":"<a href=\"module-Settings.html#~RequestTypeSettings\">RequestTypeSettings</a>"},{"title":"module:Settings~Scheduling","link":"<a href=\"module-Settings.html#~Scheduling\">Scheduling</a>"},{"title":"module:Settings~Settings~get","link":"<a href=\"module-Settings-Settings.html#~get\">get</a>","description":"<p>Return the settings object. Don't copy/store this object, you won't get updates.</p>"},{"title":"module:Settings~Settings~reset","link":"<a href=\"module-Settings-Settings.html#~reset\">reset</a>","description":"<p>Resets the settings object. Everything is set to its default value.</p>"},{"title":"module:Settings~Settings~update","link":"<a href=\"module-Settings-Settings.html#~update\">update</a>"},{"title":"module:Settings~StreamingSettings","link":"<a href=\"module-Settings.html#~StreamingSettings\">StreamingSettings</a>"},{"title":"module:Settings~Text","link":"<a href=\"module-Settings.html#~Text\">Text</a>"},{"title":"module:Settings~TimeShiftBuffer","link":"<a href=\"module-Settings.html#~TimeShiftBuffer\">TimeShiftBuffer</a>"},{"title":"module:Settings~UtcSynchronizationSettings","link":"<a href=\"module-Settings.html#~UtcSynchronizationSettings\">UtcSynchronizationSettings</a>"},{"title":"module:TimeUtils#ntpToUTC","link":"<a href=\"module-TimeUtils.html#ntpToUTC\">ntpToUTC</a>","description":"<p>Convert NTP timestamp into an UTC timestamp</p>"},{"title":"module:URIFragmentModel#getURIFragmentData","link":"<a href=\"module-URIFragmentModel.html#getURIFragmentData\">getURIFragmentData</a>"},{"title":"module:URIFragmentModel#initialize","link":"<a href=\"module-URIFragmentModel.html#initialize\">initialize</a>"},{"title":"module:URLUtils#isHTTPS","link":"<a href=\"module-URLUtils.html#isHTTPS\">isHTTPS</a>","description":"<p>Determines whether the supplied url has https scheme</p>"},{"title":"module:URLUtils#isHTTPURL","link":"<a href=\"module-URLUtils.html#isHTTPURL\">isHTTPURL</a>","description":"<p>Determines whether the url is an HTTP-URL as defined in ISO/IEC<br>\n23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https</p>"},{"title":"module:URLUtils#isPathAbsolute","link":"<a href=\"module-URLUtils.html#isPathAbsolute\">isPathAbsolute</a>","description":"<p>Determines whether the url is path-absolute.</p>"},{"title":"module:URLUtils#isRelative","link":"<a href=\"module-URLUtils.html#isRelative\">isRelative</a>","description":"<p>Determines whether the url is relative.</p>"},{"title":"module:URLUtils#isSchemeRelative","link":"<a href=\"module-URLUtils.html#isSchemeRelative\">isSchemeRelative</a>","description":"<p>Determines whether the url is scheme-relative.</p>"},{"title":"module:URLUtils#parseBaseUrl","link":"<a href=\"module-URLUtils.html#parseBaseUrl\">parseBaseUrl</a>","description":"<p>Returns a string that contains the Base URL of a URL, if determinable.</p>"},{"title":"module:URLUtils#parseOrigin","link":"<a href=\"module-URLUtils.html#parseOrigin\">parseOrigin</a>","description":"<p>Returns a string that contains the scheme and origin of a URL,<br>\nif determinable.</p>"},{"title":"module:URLUtils#parseScheme","link":"<a href=\"module-URLUtils.html#parseScheme\">parseScheme</a>","description":"<p>Returns a string that contains the scheme of a URL, if determinable.</p>"},{"title":"module:URLUtils#registerUrlRegex","link":"<a href=\"module-URLUtils.html#registerUrlRegex\">registerUrlRegex</a>","description":"<p>Register a module to handle specific url.</p>"},{"title":"module:URLUtils#removeHostname","link":"<a href=\"module-URLUtils.html#removeHostname\">removeHostname</a>","description":"<p>Returns a string that contains the fragment of a URL without scheme,<br>\nif determinable.</p>"},{"title":"module:URLUtils#resolve","link":"<a href=\"module-URLUtils.html#resolve\">resolve</a>","description":"<p>Resolves a url given an optional base url</p>"},{"title":"MssErrors","link":"<a href=\"MssErrors.html\">MssErrors</a>"},{"title":"MssErrors#MSS_NO_TFRF_CODE","link":"<a href=\"MssErrors.html#MSS_NO_TFRF_CODE\">MSS_NO_TFRF_CODE</a>","description":"<p>Error code returned when no tfrf box is detected in MSS live stream</p>"},{"title":"MssErrors#MSS_UNSUPPORTED_CODEC_CODE","link":"<a href=\"MssErrors.html#MSS_UNSUPPORTED_CODEC_CODE\">MSS_UNSUPPORTED_CODEC_CODE</a>","description":"<p>Error code returned when one of the codecs defined in the manifest is not supported</p>"},{"title":"OfflineDownload~createFragmentStore","link":"<a href=\"OfflineDownload.html#~createFragmentStore\">createFragmentStore</a>","description":"<p>Init databsse to store fragments</p>"},{"title":"OfflineDownload~createOfflineManifest","link":"<a href=\"OfflineDownload.html#~createOfflineManifest\">createOfflineManifest</a>","description":"<p>Store in database the string representation of offline manifest (with only downloaded representations)</p>"},{"title":"OfflineDownload~deleteDownload","link":"<a href=\"OfflineDownload.html#~deleteDownload\">deleteDownload</a>","description":"<p>Delete an offline manifest (and all of its data)</p>"},{"title":"OfflineDownload~downloadFromUrl","link":"<a href=\"OfflineDownload.html#~downloadFromUrl\">downloadFromUrl</a>","description":"<p>Download a stream, from url of manifest</p>"},{"title":"OfflineDownload~generateOfflineManifest","link":"<a href=\"OfflineDownload.html#~generateOfflineManifest\">generateOfflineManifest</a>","description":"<p>Create the parser used to convert original manifest in offline manifest<br>\nCreates a JSON object that will be stored in database</p>"},{"title":"OfflineDownload~getDownloadProgression","link":"<a href=\"OfflineDownload.html#~getDownloadProgression\">getDownloadProgression</a>","description":"<p>Compute the progression of download</p>"},{"title":"OfflineDownload~onOriginalManifestLoaded","link":"<a href=\"OfflineDownload.html#~onOriginalManifestLoaded\">onOriginalManifestLoaded</a>","description":"<p>Triggered when manifest is loaded from internet.</p>"},{"title":"OfflineDownload~reset","link":"<a href=\"OfflineDownload.html#~reset\">reset</a>","description":"<p>Reset</p>"},{"title":"OfflineDownload~resetDownload","link":"<a href=\"OfflineDownload.html#~resetDownload\">resetDownload</a>","description":"<p>Reset events listeners</p>"},{"title":"OfflineDownload~resumeDownload","link":"<a href=\"OfflineDownload.html#~resumeDownload\">resumeDownload</a>","description":"<p>Resume download of a stream</p>"},{"title":"OfflineDownload~stopDownload","link":"<a href=\"OfflineDownload.html#~stopDownload\">stopDownload</a>","description":"<p>Stops downloading of fragments</p>"},{"title":"OfflineDownload~updateOfflineManifest","link":"<a href=\"OfflineDownload.html#~updateOfflineManifest\">updateOfflineManifest</a>","description":"<p>Store in database the string representation of offline manifest (with only downloaded representations)</p>"},{"title":"OfflineErrors","link":"<a href=\"OfflineErrors.html\">OfflineErrors</a>"},{"title":"OfflineErrors#OFFLINE_ERROR","link":"<a href=\"OfflineErrors.html#OFFLINE_ERROR\">OFFLINE_ERROR</a>","description":"<p>Error code returned when an error occurs in offline module</p>"},{"title":"OfflineEvents","link":"<a href=\"OfflineEvents.html\">OfflineEvents</a>"},{"title":"OfflineEvents#event:OFFLINE_RECORD_FINISHED","link":"<a href=\"OfflineEvents.html#event:OFFLINE_RECORD_FINISHED\">OFFLINE_RECORD_FINISHED</a>","description":"<p>Triggered when all record has been downloaded</p>"},{"title":"OfflineEvents#event:OFFLINE_RECORD_LOADEDMETADATA","link":"<a href=\"OfflineEvents.html#event:OFFLINE_RECORD_LOADEDMETADATA\">OFFLINE_RECORD_LOADEDMETADATA</a>","description":"<p>Triggered when all mediaInfo has been loaded</p>"},{"title":"OfflineEvents#event:OFFLINE_RECORD_STARTED","link":"<a href=\"OfflineEvents.html#event:OFFLINE_RECORD_STARTED\">OFFLINE_RECORD_STARTED</a>","description":"<p>Triggered when a record is initialized and download is started</p>"},{"title":"OfflineEvents#event:OFFLINE_RECORD_STOPPED","link":"<a href=\"OfflineEvents.html#event:OFFLINE_RECORD_STOPPED\">OFFLINE_RECORD_STOPPED</a>","description":"<p>Triggered when the user stop downloading a record</p>"},{"title":"OfflineIndexDBManifestParser~addSegmentTemplateAttributes","link":"<a href=\"OfflineIndexDBManifestParser.html#~addSegmentTemplateAttributes\">addSegmentTemplateAttributes</a>"},{"title":"OfflineIndexDBManifestParser~addSegmentTimelineElements","link":"<a href=\"OfflineIndexDBManifestParser.html#~addSegmentTimelineElements\">addSegmentTimelineElements</a>"},{"title":"OfflineIndexDBManifestParser~browseAdaptationsSet","link":"<a href=\"OfflineIndexDBManifestParser.html#~browseAdaptationsSet\">browseAdaptationsSet</a>","description":"<p>Browse adapatation set to update data (delete those taht are not choosen by user ...)</p>"},{"title":"OfflineIndexDBManifestParser~browsePeriods","link":"<a href=\"OfflineIndexDBManifestParser.html#~browsePeriods\">browsePeriods</a>","description":"<p>Browse periods</p>"},{"title":"OfflineIndexDBManifestParser~editBaseURLAttribute","link":"<a href=\"OfflineIndexDBManifestParser.html#~editBaseURLAttribute\">editBaseURLAttribute</a>","description":"<p>Update baseURL to point to local stored data P</p>"},{"title":"OfflineIndexDBManifestParser~editSegmentListAttributes","link":"<a href=\"OfflineIndexDBManifestParser.html#~editSegmentListAttributes\">editSegmentListAttributes</a>","description":"<p>Update attributes of segment list to match offline urls</p>"},{"title":"OfflineIndexDBManifestParser~editSegmentTemplateAttributes","link":"<a href=\"OfflineIndexDBManifestParser.html#~editSegmentTemplateAttributes\">editSegmentTemplateAttributes</a>","description":"<p>Update attributes of segment templates to match offline urls</p>"},{"title":"OfflineIndexDBManifestParser~encodeManifest","link":"<a href=\"OfflineIndexDBManifestParser.html#~encodeManifest\">encodeManifest</a>","description":"<p>URL encode parsed manifest</p>"},{"title":"OfflineIndexDBManifestParser~findAdaptationType","link":"<a href=\"OfflineIndexDBManifestParser.html#~findAdaptationType\">findAdaptationType</a>","description":"<p>Returns type of adapation set</p>"},{"title":"OfflineIndexDBManifestParser~findAndKeepOnlySelectedRepresentations","link":"<a href=\"OfflineIndexDBManifestParser.html#~findAndKeepOnlySelectedRepresentations\">findAndKeepOnlySelectedRepresentations</a>","description":"<p>Delete all representations except the one choosed by user</p>"},{"title":"OfflineIndexDBManifestParser~findMimeType","link":"<a href=\"OfflineIndexDBManifestParser.html#~findMimeType\">findMimeType</a>","description":"<p>Returns mime-type of xml tag</p>"},{"title":"OfflineIndexDBManifestParser~findRepresentations","link":"<a href=\"OfflineIndexDBManifestParser.html#~findRepresentations\">findRepresentations</a>","description":"<p>Returns representations of adaptation set</p>"},{"title":"OfflineIndexDBManifestParser~getBestRepresentationId","link":"<a href=\"OfflineIndexDBManifestParser.html#~getBestRepresentationId\">getBestRepresentationId</a>","description":"<p>Get id of first representation of adaptation set</p>"},{"title":"OfflineIndexDBManifestParser~getFragmentId","link":"<a href=\"OfflineIndexDBManifestParser.html#~getFragmentId\">getFragmentId</a>","description":"<p>Parse and returns fragments of offline url =&gt; xxxx://xxxx/fragmentId/</p>"},{"title":"OfflineIndexDBManifestParser~getSegmentList","link":"<a href=\"OfflineIndexDBManifestParser.html#~getSegmentList\">getSegmentList</a>","description":"<p>Return segment list tags of adaptations set</p>"},{"title":"OfflineIndexDBManifestParser~getSegmentTemplate","link":"<a href=\"OfflineIndexDBManifestParser.html#~getSegmentTemplate\">getSegmentTemplate</a>","description":"<p>Return segment template list of adaptations set</p>"},{"title":"OfflineIndexDBManifestParser~parse","link":"<a href=\"OfflineIndexDBManifestParser.html#~parse\">parse</a>","description":"<p>Parse XML manifest</p>"},{"title":"OfflineStreamProcessor#download","link":"<a href=\"OfflineStreamProcessor.html#download\">download</a>","description":"<p>Performs download of fragment according to type</p>"},{"title":"OfflineStreamProcessor#getInitRequest","link":"<a href=\"OfflineStreamProcessor.html#getInitRequest\">getInitRequest</a>","description":"<p>Execute init request for the represenation</p>"},{"title":"OfflineStreamProcessor#getNextRequest","link":"<a href=\"OfflineStreamProcessor.html#getNextRequest\">getNextRequest</a>","description":"<p>Get next request</p>"},{"title":"OfflineStreamProcessor#reset","link":"<a href=\"OfflineStreamProcessor.html#reset\">reset</a>","description":"<p>Reset</p>"},{"title":"OfflineStreamProcessor#start","link":"<a href=\"OfflineStreamProcessor.html#start\">start</a>","description":"<p>Start download</p>"},{"title":"OfflineStreamProcessor#stop","link":"<a href=\"OfflineStreamProcessor.html#stop\">stop</a>","description":"<p>Stops download of fragments</p>"},{"title":"OfflineStreamProcessor#updateRepresentation","link":"<a href=\"OfflineStreamProcessor.html#updateRepresentation\">updateRepresentation</a>","description":"<p>Update representation</p>"},{"title":"OfflineStream~getMediaInfos","link":"<a href=\"OfflineStream.html#~getMediaInfos\">getMediaInfos</a>","description":"<p>Creates media infos list, so that user will be able to choose the representation he wants to download</p>"},{"title":"OfflineStream~initialize","link":"<a href=\"OfflineStream.html#~initialize\">initialize</a>","description":"<p>Initialize offlinestream</p>"},{"title":"OfflineStream~initializeAllMediasInfoList","link":"<a href=\"OfflineStream.html#~initializeAllMediasInfoList\">initializeAllMediasInfoList</a>","description":"<p>Initialize with choosen representations by user</p>"},{"title":"OfflineStream~initializeMedia","link":"<a href=\"OfflineStream.html#~initializeMedia\">initializeMedia</a>","description":"<p>Initialize media for each type</p>"},{"title":"OfflineStream~reset","link":"<a href=\"OfflineStream.html#~reset\">reset</a>","description":"<p>Reset</p>"},{"title":"OfflineStream~resetInitialSettings","link":"<a href=\"OfflineStream.html#~resetInitialSettings\">resetInitialSettings</a>","description":"<p>Reset</p>"},{"title":"OfflineStream~startOfflineStreamProcessors","link":"<a href=\"OfflineStream.html#~startOfflineStreamProcessors\">startOfflineStreamProcessors</a>","description":"<p>Start offline stream processors</p>"},{"title":"OfflineStream~stopOfflineStreamProcessors","link":"<a href=\"OfflineStream.html#~stopOfflineStreamProcessors\">stopOfflineStreamProcessors</a>","description":"<p>Stop offline stream processors</p>"},{"title":"PlaybackController#computeAndSetLiveDelay","link":"<a href=\"PlaybackController.html#computeAndSetLiveDelay\">computeAndSetLiveDelay</a>","description":"<p>Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge</p>"},{"title":"PlaybackController~getAvailabilityStartTime","link":"<a href=\"PlaybackController.html#~getAvailabilityStartTime\">getAvailabilityStartTime</a>","description":"<p>Returns the availabilityStartTime</p>"},{"title":"PlaybackController~getBufferLevel","link":"<a href=\"PlaybackController.html#~getBufferLevel\">getBufferLevel</a>","description":"<p>Returns the combined minimum buffer level of all StreamProcessors. If a filter list is provided the types specified in the filter list are excluded.</p>"},{"title":"PlaybackController~getCurrentLiveLatency","link":"<a href=\"PlaybackController.html#~getCurrentLiveLatency\">getCurrentLiveLatency</a>","description":"<p>Returns the current live latency</p>"},{"title":"PlaybackController~getEnded","link":"<a href=\"PlaybackController.html#~getEnded\">getEnded</a>","description":"<p>Returns ended attribute of the video element</p>"},{"title":"PlaybackController~getIsDynamic","link":"<a href=\"PlaybackController.html#~getIsDynamic\">getIsDynamic</a>","description":"<p>Returns whether a stream is type dynamic or not</p>"},{"title":"PlaybackController~getIsManifestUpdateInProgress","link":"<a href=\"PlaybackController.html#~getIsManifestUpdateInProgress\">getIsManifestUpdateInProgress</a>","description":"<p>Returns whether a manifest update is in progress</p>"},{"title":"PlaybackController~getLiveDelay","link":"<a href=\"PlaybackController.html#~getLiveDelay\">getLiveDelay</a>","description":"<p>Returns the current live delay. A seek triggered by the user adjusts this value.</p>"},{"title":"PlaybackController~getLowLatencyModeEnabled","link":"<a href=\"PlaybackController.html#~getLowLatencyModeEnabled\">getLowLatencyModeEnabled</a>","description":"<p>Returns the value of lowLatencyModeEnabled</p>"},{"title":"PlaybackController~getOriginalLiveDelay","link":"<a href=\"PlaybackController.html#~getOriginalLiveDelay\">getOriginalLiveDelay</a>","description":"<p>Returns the original live delay as calculated at playback start</p>"},{"title":"PlaybackController~getPlaybackRate","link":"<a href=\"PlaybackController.html#~getPlaybackRate\">getPlaybackRate</a>","description":"<p>Returns current playback rate of the video element</p>"},{"title":"PlaybackController~getPlaybackStalled","link":"<a href=\"PlaybackController.html#~getPlaybackStalled\">getPlaybackStalled</a>","description":"<p>Returns stalled state</p>"},{"title":"PlaybackController~getPlayedRanges","link":"<a href=\"PlaybackController.html#~getPlayedRanges\">getPlayedRanges</a>","description":"<p>Returns the played ranges of the video element</p>"},{"title":"PlaybackController~getStreamController","link":"<a href=\"PlaybackController.html#~getStreamController\">getStreamController</a>","description":"<p>Returns the StreamController</p>"},{"title":"PlaybackController~getStreamEndTime","link":"<a href=\"PlaybackController.html#~getStreamEndTime\">getStreamEndTime</a>","description":"<p>Returns end time of a period</p>"},{"title":"PlaybackController~getTime","link":"<a href=\"PlaybackController.html#~getTime\">getTime</a>","description":"<p>Returns current time of video element</p>"},{"title":"PlaybackController~getTimeToStreamEnd","link":"<a href=\"PlaybackController.html#~getTimeToStreamEnd\">getTimeToStreamEnd</a>","description":"<p>Returns remaining duration of a period</p>"},{"title":"PlaybackController~initialize","link":"<a href=\"PlaybackController.html#~initialize\">initialize</a>","description":"<p>Initializes the PlaybackController. This function is called whenever the stream is switched.</p>"},{"title":"PlaybackController~isPaused","link":"<a href=\"PlaybackController.html#~isPaused\">isPaused</a>","description":"<p>Returns paused state of the video element</p>"},{"title":"PlaybackController~isSeeking","link":"<a href=\"PlaybackController.html#~isSeeking\">isSeeking</a>","description":"<p>Returns seeking state of the video element</p>"},{"title":"PlaybackController~isStalled","link":"<a href=\"PlaybackController.html#~isStalled\">isStalled</a>","description":"<p>Returns stalled state of the video element</p>"},{"title":"PlaybackController~pause","link":"<a href=\"PlaybackController.html#~pause\">pause</a>","description":"<p>Triggers pause() on the video element</p>"},{"title":"PlaybackController~play","link":"<a href=\"PlaybackController.html#~play\">play</a>","description":"<p>Triggers play() on the video element</p>"},{"title":"PlaybackController~reset","link":"<a href=\"PlaybackController.html#~reset\">reset</a>","description":"<p>Reset all settings</p>"},{"title":"PlaybackController~seek","link":"<a href=\"PlaybackController.html#~seek\">seek</a>","description":"<p>Triggers a seek to the specified media time. If internal is enabled there will be now &quot;seeked&quot; event dispatched</p>"},{"title":"PlaybackController~seekToCurrentLive","link":"<a href=\"PlaybackController.html#~seekToCurrentLive\">seekToCurrentLive</a>","description":"<p>Seeks to the live edge as currently defined by liveDelay</p>"},{"title":"PlaybackController~seekToOriginalLive","link":"<a href=\"PlaybackController.html#~seekToOriginalLive\">seekToOriginalLive</a>","description":"<p>Seeks back to the live edge as defined by the originally calculated live delay</p>"},{"title":"PlaybackController~startUpdatingWallclockTime","link":"<a href=\"PlaybackController.html#~startUpdatingWallclockTime\">startUpdatingWallclockTime</a>","description":"<p>Start interval handler for wallclock time update</p>"},{"title":"PlaybackController~stopUpdatingWallclockTime","link":"<a href=\"PlaybackController.html#~stopUpdatingWallclockTime\">stopUpdatingWallclockTime</a>","description":"<p>Stop the interval handler for the wallclock time update</p>"},{"title":"PlaybackController~updateCurrentTime","link":"<a href=\"PlaybackController.html#~updateCurrentTime\">updateCurrentTime</a>","description":"<p>Compare the current time of the video against the DVR window. If we are out of the DVR window we need to seek.</p>"},{"title":"PlayList#mstart","link":"<a href=\"PlayList.html#mstart\">mstart</a>","description":"<p>Presentation time at which playout was requested by the user...</p>"},{"title":"PlayList#start","link":"<a href=\"PlayList.html#start\">start</a>","description":"<p>Timestamp of the user action that starts the playback stream...</p>"},{"title":"PlayList#starttype","link":"<a href=\"PlayList.html#starttype\">starttype</a>","description":"<p>Type of user action which triggered playout</p>\n<ul>\n<li>New playout request (e.g. initial playout or seeking)</li>\n<li>Resume from pause</li>\n<li>Other user request (e.g. user-requested quality change)</li>\n<li>Start of a metrics collection stream (hence earlier entries in the play list not collected)</li>\n</ul>"},{"title":"PlayList#trace","link":"<a href=\"PlayList.html#trace\">trace</a>","description":"<p>List of streams of continuous rendering of decoded samples.</p>"},{"title":"PlayListTrace#duration","link":"<a href=\"PlayListTrace.html#duration\">duration</a>","description":"<p>The duration of the continuously presented samples (which is the same in real time and media time). &quot;Continuously presented&quot; means that the media clock continued to advance at the playout speed throughout the interval. NOTE: the spec does not call out the units, but all other durations etc are in ms, and we use ms too.</p>"},{"title":"PlayListTrace#mstart","link":"<a href=\"PlayListTrace.html#mstart\">mstart</a>","description":"<p>The presentation time of the first sample rendered.</p>"},{"title":"PlayListTrace#playbackspeed","link":"<a href=\"PlayListTrace.html#playbackspeed\">playbackspeed</a>","description":"<p>The playback speed relative to normal playback speed (i.e.normal forward playback speed is 1.0).</p>"},{"title":"PlayListTrace#representationid","link":"<a href=\"PlayListTrace.html#representationid\">representationid</a>","description":"<p>The value of the Representation@id of the Representation from which the samples were taken.</p>"},{"title":"PlayListTrace#start","link":"<a href=\"PlayListTrace.html#start\">start</a>","description":"<p>The time at which the first sample was rendered</p>"},{"title":"PlayListTrace#stopreason","link":"<a href=\"PlayListTrace.html#stopreason\">stopreason</a>","description":"<p>The reason why continuous presentation of this Representation was stopped.<br>\nrepresentation switch<br>\nrebuffering<br>\nuser request<br>\nend of Period<br>\nend of Stream<br>\nend of content<br>\nend of a metrics collection period</p>"},{"title":"PlayListTrace#subreplevel","link":"<a href=\"PlayListTrace.html#subreplevel\">subreplevel</a>","description":"<p>If not present, this metrics concerns the Representation as a whole.<br>\nIf present, subreplevel indicates the greatest value of any<br>\nSubrepresentation@level being rendered.</p>"},{"title":"PreBufferSink#discharge","link":"<a href=\"PreBufferSink.html#discharge\">discharge</a>","description":"<p>Return the all chunks in the buffer the lie between times start and end.<br>\nBecause a chunk cannot be split, this returns the full chunk if any part of its time lies in the requested range.<br>\nChunks are removed from the buffer when they are discharged.</p>"},{"title":"ProtectionData.clearkeys","link":"<a href=\"ProtectionData.html#.clearkeys\">clearkeys</a>","description":"<p>ClearKey key-pairs that can be used to decrypt the content</p>"},{"title":"ProtectionData.httpRequestsHeaders","link":"<a href=\"ProtectionData.html#.httpRequestsHeaders\">httpRequestsHeaders</a>","description":"<p>HTTP Request Headers for use in license requests.  Each property name<br>\nin the object is a header name with its corresponding header value being<br>\nthe property value</p>"},{"title":"ProtectionData.priority","link":"<a href=\"ProtectionData.html#.priority\">priority</a>","description":"<p>priority</p>"},{"title":"ProtectionData.serverURL","link":"<a href=\"ProtectionData.html#.serverURL\">serverURL</a>","description":"<p>License server URL</p>"},{"title":"ProtectionErrors","link":"<a href=\"ProtectionErrors.html\">ProtectionErrors</a>"},{"title":"ProtectionErrors#KEY_SESSION_CREATED_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#KEY_SESSION_CREATED_ERROR_CODE\">KEY_SESSION_CREATED_ERROR_CODE</a>","description":"<p>Error code returned when key session has not been successfully created</p>"},{"title":"ProtectionErrors#KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE\">KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE</a>","description":"<p>Error code returned when license validity has expired</p>"},{"title":"ProtectionErrors#KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE\">KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE</a>","description":"<p>Error code returned when key system access is denied</p>"},{"title":"ProtectionErrors#MEDIA_KEY_MESSAGE_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEY_MESSAGE_ERROR_CODE\">MEDIA_KEY_MESSAGE_ERROR_CODE</a>","description":"<p>Error code returned when an error occured in keymessage event for ProtectionModel_01b</p>"},{"title":"ProtectionErrors#MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE\">MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE</a>","description":"<p>Error code returned when license request failed after a keymessage event has been triggered</p>"},{"title":"ProtectionErrors#MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE\">MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE</a>","description":"<p>Error code returned when challenge is invalid in keymessage event (event triggered by CDM)</p>"},{"title":"ProtectionErrors#MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE\">MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE</a>","description":"<p>Error code returned when no licenser url is defined</p>"},{"title":"ProtectionErrors#MEDIA_KEYERR_CLIENT_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEYERR_CLIENT_CODE\">MEDIA_KEYERR_CLIENT_CODE</a>","description":"<p>Error code returned by keyerror api for ProtectionModel_01b</p>"},{"title":"ProtectionErrors#MEDIA_KEYERR_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEYERR_CODE\">MEDIA_KEYERR_CODE</a>","description":"<p>Generid key Error code</p>"},{"title":"ProtectionErrors#MEDIA_KEYERR_DOMAIN_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEYERR_DOMAIN_CODE\">MEDIA_KEYERR_DOMAIN_CODE</a>","description":"<p>Error code returned by keyerror api for ProtectionModel_01b</p>"},{"title":"ProtectionErrors#MEDIA_KEYERR_HARDWARECHANGE_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEYERR_HARDWARECHANGE_CODE\">MEDIA_KEYERR_HARDWARECHANGE_CODE</a>","description":"<p>Error code returned by keyerror api for ProtectionModel_01b</p>"},{"title":"ProtectionErrors#MEDIA_KEYERR_OUTPUT_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEYERR_OUTPUT_CODE\">MEDIA_KEYERR_OUTPUT_CODE</a>","description":"<p>Error code returned by keyerror api for ProtectionModel_01b</p>"},{"title":"ProtectionErrors#MEDIA_KEYERR_SERVICE_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEYERR_SERVICE_CODE\">MEDIA_KEYERR_SERVICE_CODE</a>","description":"<p>Error code returned by keyerror api for ProtectionModel_01b</p>"},{"title":"ProtectionErrors#MEDIA_KEYERR_UNKNOWN_CODE","link":"<a href=\"ProtectionErrors.html#MEDIA_KEYERR_UNKNOWN_CODE\">MEDIA_KEYERR_UNKNOWN_CODE</a>","description":"<p>Error code returned by keyerror api for ProtectionModel_01b</p>"},{"title":"ProtectionErrors#SERVER_CERTIFICATE_UPDATED_ERROR_CODE","link":"<a href=\"ProtectionErrors.html#SERVER_CERTIFICATE_UPDATED_ERROR_CODE\">SERVER_CERTIFICATE_UPDATED_ERROR_CODE</a>","description":"<p>Error code returned when License server certificate has not been successfully updated</p>"},{"title":"ProtectionEvents","link":"<a href=\"ProtectionEvents.html\">ProtectionEvents</a>","description":"<p>Public facing external events to be used when including protection package.<br>\nAll public events will be aggregated into the MediaPlayerEvents Class and can be accessed<br>\nvia MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.</p>"},{"title":"ProtectionEvents#event:KEY_ADDED","link":"<a href=\"ProtectionEvents.html#event:KEY_ADDED\">KEY_ADDED</a>","description":"<p>Event ID for events delivered when a new key has been added</p>"},{"title":"ProtectionEvents#event:KEY_ERROR","link":"<a href=\"ProtectionEvents.html#event:KEY_ERROR\">KEY_ERROR</a>","description":"<p>Event ID for events delivered when an error is encountered by the CDM<br>\nwhile processing a license server response message</p>"},{"title":"ProtectionEvents#event:KEY_MESSAGE","link":"<a href=\"ProtectionEvents.html#event:KEY_MESSAGE\">KEY_MESSAGE</a>","description":"<p>Event ID for events delivered when the protection set receives<br>\na key message from the CDM</p>"},{"title":"ProtectionEvents#event:KEY_SESSION_CLOSED","link":"<a href=\"ProtectionEvents.html#event:KEY_SESSION_CLOSED\">KEY_SESSION_CLOSED</a>","description":"<p>Event ID for events delivered when a key session close<br>\nprocess has completed</p>"},{"title":"ProtectionEvents#event:KEY_SESSION_CREATED","link":"<a href=\"ProtectionEvents.html#event:KEY_SESSION_CREATED\">KEY_SESSION_CREATED</a>","description":"<p>Event ID for events delivered when a new key sessions creation<br>\nprocess has completed</p>"},{"title":"ProtectionEvents#event:KEY_SESSION_REMOVED","link":"<a href=\"ProtectionEvents.html#event:KEY_SESSION_REMOVED\">KEY_SESSION_REMOVED</a>","description":"<p>Event ID for events delivered when a key session removal<br>\nprocess has completed</p>"},{"title":"ProtectionEvents#event:KEY_STATUSES_CHANGED","link":"<a href=\"ProtectionEvents.html#event:KEY_STATUSES_CHANGED\">KEY_STATUSES_CHANGED</a>","description":"<p>Event ID for events delivered when the status of one or more<br>\ndecryption keys has changed</p>"},{"title":"ProtectionEvents#event:KEY_SYSTEM_ACCESS_COMPLETE","link":"<a href=\"ProtectionEvents.html#event:KEY_SYSTEM_ACCESS_COMPLETE\">KEY_SYSTEM_ACCESS_COMPLETE</a>","description":"<p>Event ID for events delivered when a key system access procedure<br>\nhas completed</p>"},{"title":"ProtectionEvents#event:KEY_SYSTEM_SELECTED","link":"<a href=\"ProtectionEvents.html#event:KEY_SYSTEM_SELECTED\">KEY_SYSTEM_SELECTED</a>","description":"<p>Event ID for events delivered when a key system selection procedure<br>\ncompletes</p>"},{"title":"ProtectionEvents#event:LICENSE_REQUEST_COMPLETE","link":"<a href=\"ProtectionEvents.html#event:LICENSE_REQUEST_COMPLETE\">LICENSE_REQUEST_COMPLETE</a>","description":"<p>Event ID for events delivered when a license request procedure<br>\nhas completed</p>"},{"title":"ProtectionEvents#event:LICENSE_REQUEST_SENDING","link":"<a href=\"ProtectionEvents.html#event:LICENSE_REQUEST_SENDING\">LICENSE_REQUEST_SENDING</a>","description":"<p>Sending a license rquest</p>"},{"title":"ProtectionEvents#event:PROTECTION_CREATED","link":"<a href=\"ProtectionEvents.html#event:PROTECTION_CREATED\">PROTECTION_CREATED</a>","description":"<p>Event ID for events delivered when the Protection system is detected and created.</p>"},{"title":"ProtectionEvents#event:PROTECTION_DESTROYED","link":"<a href=\"ProtectionEvents.html#event:PROTECTION_DESTROYED\">PROTECTION_DESTROYED</a>","description":"<p>Event ID for events delivered when the Protection system is destroyed.</p>"},{"title":"ProtectionModel#closeKeySession","link":"<a href=\"ProtectionModel.html#closeKeySession\">closeKeySession</a>","description":"<p>Close the given session and release all associated keys.  Following<br>\nthis call, the sessionToken becomes invalid.  Sends KEY_SESSION_CLOSED<br>\nwith sessionID as data</p>"},{"title":"ProtectionModel#createKeySession","link":"<a href=\"ProtectionModel.html#createKeySession\">createKeySession</a>","description":"<p>Creates a new key session using the given initData and type. Sends<br>\nKEY_SESSION_CREATED event with MediaPlayer.vo.protection.SessionToken<br>\nas data.</p>"},{"title":"ProtectionModel#getAllInitData","link":"<a href=\"ProtectionModel.html#getAllInitData\">getAllInitData</a>","description":"<p>Returns an array of all initialization data currently used by<br>\nactive sessions.</p>"},{"title":"ProtectionModel#keySystem","link":"<a href=\"ProtectionModel.html#keySystem\">keySystem</a>","description":"<p>Currently selected key system.  Will be null or undefined if no key<br>\nsystem has yet been selected</p>"},{"title":"ProtectionModel#loadKeySession","link":"<a href=\"ProtectionModel.html#loadKeySession\">loadKeySession</a>","description":"<p>Loads the persisted key session data associated with the given sessionId<br>\ninto a new session.  Sends KEY_SESSION_CREATED event with<br>\n{@MediaPlayer.vo.protection.SessionToken} as data.</p>"},{"title":"ProtectionModel#removeKeySession","link":"<a href=\"ProtectionModel.html#removeKeySession\">removeKeySession</a>","description":"<p>Removes any persisted key session data associated with the given session.<br>\nAlso closes the session.  Sends KEY_SESSION_REMOVED and<br>\nENAME_KEY_SESSION_CLOSED with sessionID as data</p>"},{"title":"ProtectionModel#requestKeySystemAccess","link":"<a href=\"ProtectionModel.html#requestKeySystemAccess\">requestKeySystemAccess</a>","description":"<p>Determine if the user-agent supports one of the given key systems and<br>\ncontent type configurations. Sends ENAME_KEY_SYSTEM_ACCESS_COMPLETE event<br>\nwith a KeySystemAccess object as event data</p>"},{"title":"ProtectionModel#selectKeySystem","link":"<a href=\"ProtectionModel.html#selectKeySystem\">selectKeySystem</a>","description":"<p>Selects the key system to use for all future operations on this<br>\nProtectionModel.  Sends ENAME_KEY_SYSTEM_SELECTED with no data</p>"},{"title":"ProtectionModel#setMediaElement","link":"<a href=\"ProtectionModel.html#setMediaElement\">setMediaElement</a>","description":"<p>Associate this protection model with a HTMLMediaElement</p>"},{"title":"ProtectionModel#setServerCertificate","link":"<a href=\"ProtectionModel.html#setServerCertificate\">setServerCertificate</a>","description":"<p>Sets the certificate to be used by the CDM for encrypting messages</p>"},{"title":"ProtectionModel#updateKeySession","link":"<a href=\"ProtectionModel.html#updateKeySession\">updateKeySession</a>","description":"<p>Update the given key session with a key (or any other message<br>\nintended for the CDM)</p>"},{"title":"ProtectionModel_01b~findSessionByID","link":"<a href=\"ProtectionModel_01b.html#~findSessionByID\">findSessionByID</a>","description":"<p>Helper function to retrieve the stored session token based on a given<br>\nsessionId value</p>"},{"title":"ProtectionModel_3Feb2014~closeKeySession","link":"<a href=\"ProtectionModel_3Feb2014.html#~closeKeySession\">closeKeySession</a>","description":"<p>Close the given session and release all associated keys.  Following<br>\nthis call, the sessionToken becomes invalid</p>"},{"title":"ProtectionModel_21Jan2015~createKeySession","link":"<a href=\"ProtectionModel_21Jan2015.html#~createKeySession\">createKeySession</a>","description":"<p>Create a key session, a session token and initialize a request by calling generateRequest</p>"},{"title":"ProtectionModel_21Jan2015~selectKeySystem","link":"<a href=\"ProtectionModel_21Jan2015.html#~selectKeySystem\">selectKeySystem</a>","description":"<p>Selects a key system by creating the mediaKeys and adding them to the video element</p>"},{"title":"Protection~createProtectionSystem","link":"<a href=\"Protection.html#~createProtectionSystem\">createProtectionSystem</a>","description":"<p>Create a ProtectionController and associated ProtectionModel for use with<br>\na single piece of content.</p>"},{"title":"RepresentationSwitch#lto","link":"<a href=\"RepresentationSwitch.html#lto\">lto</a>","description":"<p>If not present, this metrics concerns the Representation as a whole.<br>\nIf present, lto indicates the value of SubRepresentation@level within<br>\nRepresentation identifying the switch-to level of the Representation.</p>"},{"title":"RepresentationSwitch#mt","link":"<a href=\"RepresentationSwitch.html#mt\">mt</a>","description":"<p>The media presentation time of the earliest access unit<br>\n(out of all media content components) played out from<br>\nthe Representation.</p>"},{"title":"RepresentationSwitch#t","link":"<a href=\"RepresentationSwitch.html#t\">t</a>","description":"<p>Time of the switch event.</p>"},{"title":"RepresentationSwitch#to","link":"<a href=\"RepresentationSwitch.html#to\">to</a>","description":"<p>Value of Representation@id identifying the switch-to Representation.</p>"},{"title":"RequestsQueue#executedRequests","link":"<a href=\"RequestsQueue.html#executedRequests\">executedRequests</a>","description":"<p>Array of the The requests that have completed</p>"},{"title":"RequestsQueue#loadingRequests","link":"<a href=\"RequestsQueue.html#loadingRequests\">loadingRequests</a>","description":"<p>Array of all of the requests that have begun to load<br>\nThis request may not make it into the executed queue if it is abandon due to ABR rules for example.</p>"},{"title":"ScheduleController~getBufferTarget","link":"<a href=\"ScheduleController.html#~getBufferTarget\">getBufferTarget</a>","description":"<p>Determine the buffer target depending on the type and whether we have audio and video AdaptationSets available</p>"},{"title":"ScheduleController~schedule","link":"<a href=\"ScheduleController.html#~schedule\">schedule</a>","description":"<p>Schedule the request for an init or a media segment</p>"},{"title":"SchedulingInfo#availabilityStartTime","link":"<a href=\"SchedulingInfo.html#availabilityStartTime\">availabilityStartTime</a>","description":"<p>Availability start time of fragment</p>"},{"title":"SchedulingInfo#duration","link":"<a href=\"SchedulingInfo.html#duration\">duration</a>","description":"<p>Duration of fragment</p>"},{"title":"SchedulingInfo#mediaType","link":"<a href=\"SchedulingInfo.html#mediaType\">mediaType</a>","description":"<p>Type of stream Audio | Video | FragmentedText</p>"},{"title":"SchedulingInfo#quality","link":"<a href=\"SchedulingInfo.html#quality\">quality</a>","description":"<p>Bit Rate Quality of fragment</p>"},{"title":"SchedulingInfo#range","link":"<a href=\"SchedulingInfo.html#range\">range</a>","description":"<p>Range of fragment</p>"},{"title":"SchedulingInfo#startTime","link":"<a href=\"SchedulingInfo.html#startTime\">startTime</a>","description":"<p>Presentation start time of fragment</p>"},{"title":"SchedulingInfo#state","link":"<a href=\"SchedulingInfo.html#state\">state</a>","description":"<p>Current state of fragment</p>"},{"title":"SchedulingInfo#t","link":"<a href=\"SchedulingInfo.html#t\">t</a>","description":"<p>Time of the scheduling event.</p>"},{"title":"SchedulingInfo#type","link":"<a href=\"SchedulingInfo.html#type\">type</a>","description":"<p>Type of fragment (initialization | media)</p>"},{"title":"ServiceDescriptionController~getProducerReferenceTimeOffsets","link":"<a href=\"ServiceDescriptionController.html#~getProducerReferenceTimeOffsets\">getProducerReferenceTimeOffsets</a>","description":"<p>Returns the current calculated time offsets based on ProducerReferenceTime elements</p>"},{"title":"ServiceDescriptionController~getServiceDescriptionSettings","link":"<a href=\"ServiceDescriptionController.html#~getServiceDescriptionSettings\">getServiceDescriptionSettings</a>","description":"<p>Returns the service description settings for latency, catchup and bandwidth</p>"},{"title":"SessionToken#getExpirationTime","link":"<a href=\"SessionToken.html#getExpirationTime\">getExpirationTime</a>","description":"<p>The time, in milliseconds since 01 January, 1970 UTC, after which<br>\nthe key(s) in the session will no longer be usable to decrypt<br>\nmedia data, or NaN if no such time exists</p>"},{"title":"SessionToken#getKeyStatuses","link":"<a href=\"SessionToken.html#getKeyStatuses\">getKeyStatuses</a>","description":"<p>Returns a read-only map of key IDs known to the session to the<br>\ncurrent status of the associated key.</p>"},{"title":"SessionToken#getSessionId","link":"<a href=\"SessionToken.html#getSessionId\">getSessionId</a>","description":"<p>Returns the unique session ID designated to this session</p>"},{"title":"SessionToken#getSessionType","link":"<a href=\"SessionToken.html#getSessionType\">getSessionType</a>","description":"<p>Returns the session type.  Session types are defined<br>\n{@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeySessionType|here}</p>"},{"title":"SessionToken#initData","link":"<a href=\"SessionToken.html#initData\">initData</a>","description":"<p>The initialization data used to create this session</p>"},{"title":"Stream#activate","link":"<a href=\"Stream.html#activate\">activate</a>","description":"<p>Activates Stream by re-initializing some of its components</p>"},{"title":"Stream#deactivate","link":"<a href=\"Stream.html#deactivate\">deactivate</a>","description":"<p>Partially resets some of the Stream elements. This function is called when preloading of streams is canceled or a stream switch occurs.</p>"},{"title":"Stream#getBitrateListFor","link":"<a href=\"Stream.html#getBitrateListFor\">getBitrateListFor</a>"},{"title":"StreamController~_activateStream","link":"<a href=\"StreamController.html#~_activateStream\">_activateStream</a>","description":"<p>Activates a new stream.</p>"},{"title":"StreamController~_getNextStream","link":"<a href=\"StreamController.html#~_getNextStream\">_getNextStream</a>","description":"<p>Returns the next stream to be played relative to the stream provided. If no stream is provided we use the active stream.<br>\nIn order to avoid rounding issues we should not use the duration of the periods. Instead find the stream with starttime closest to startTime of the previous stream.</p>"},{"title":"StreamController~_getNextStreams","link":"<a href=\"StreamController.html#~_getNextStreams\">_getNextStreams</a>","description":"<p>Returns all upcoming streams relative to the provided stream. If no stream is provided we use the active stream.</p>"},{"title":"StreamController~_onPlaybackEnded","link":"<a href=\"StreamController.html#~_onPlaybackEnded\">_onPlaybackEnded</a>","description":"<p>Once playback has ended we switch to the next stream</p>"},{"title":"StreamController~addDVRMetric","link":"<a href=\"StreamController.html#~addDVRMetric\">addDVRMetric</a>","description":"<p>Add the DVR window to the metric list. We need the DVR window to restrict the seeking and calculate the right start time.</p>"},{"title":"StreamController~getActiveStream","link":"<a href=\"StreamController.html#~getActiveStream\">getActiveStream</a>","description":"<p>Returns the active stream</p>"},{"title":"StreamController~getActiveStreamProcessors","link":"<a href=\"StreamController.html#~getActiveStreamProcessors\">getActiveStreamProcessors</a>","description":"<p>Returns the streamProcessors of the active stream.</p>"},{"title":"StreamController~getAutoPlay","link":"<a href=\"StreamController.html#~getAutoPlay\">getAutoPlay</a>","description":"<p>Auto Play indicates if the stream starts automatically as soon as it is initialized.</p>"},{"title":"StreamController~getInitialPlayback","link":"<a href=\"StreamController.html#~getInitialPlayback\">getInitialPlayback</a>","description":"<p>Initial playback indicates if we have called play() for the first time yet.</p>"},{"title":"StreamController~getStreamForTime","link":"<a href=\"StreamController.html#~getStreamForTime\">getStreamForTime</a>","description":"<p>Returns the corresponding stream object for a specific presentation time.</p>"},{"title":"StreamController~getTimeRelativeToStreamId","link":"<a href=\"StreamController.html#~getTimeRelativeToStreamId\">getTimeRelativeToStreamId</a>","description":"<p>Returns a playhead time, in seconds, converted to be relative<br>\nto the start of an identified stream/period or null if no such stream</p>"},{"title":"StreamController~hasAudioTrack","link":"<a href=\"StreamController.html#~hasAudioTrack\">hasAudioTrack</a>","description":"<p>Check if the stream has an audio track</p>"},{"title":"StreamController~hasVideoTrack","link":"<a href=\"StreamController.html#~hasVideoTrack\">hasVideoTrack</a>","description":"<p>Check if the stream has a video track</p>"},{"title":"StreamController~load","link":"<a href=\"StreamController.html#~load\">load</a>","description":"<p>Start the streaming session by loading the target manifest</p>"},{"title":"StreamController~loadWithManifest","link":"<a href=\"StreamController.html#~loadWithManifest\">loadWithManifest</a>","description":"<p>Start the streaming session by using the provided manifest object</p>"},{"title":"StreamProcessor~_onFragmentLoadingAbandoned","link":"<a href=\"StreamProcessor.html#~_onFragmentLoadingAbandoned\">_onFragmentLoadingAbandoned</a>","description":"<p>We have canceled the download of a fragment and need to adjust the buffer time or reload an init segment</p>"},{"title":"StreamProcessor~_onFragmentLoadingCompleted","link":"<a href=\"StreamProcessor.html#~_onFragmentLoadingCompleted\">_onFragmentLoadingCompleted</a>","description":"<p>When a fragment has been loaded we need to start the schedule timer again in case of an error.</p>"},{"title":"StreamProcessor~getRepresentationInfo","link":"<a href=\"StreamProcessor.html#~getRepresentationInfo\">getRepresentationInfo</a>","description":"<p>Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.<br>\nOtherwise, this function will return the current voRepresentation used by the representationController.</p>"},{"title":"StreamProcessor~prepareInnerPeriodPlaybackSeeking","link":"<a href=\"StreamProcessor.html#~prepareInnerPeriodPlaybackSeeking\">prepareInnerPeriodPlaybackSeeking</a>","description":"<p>When a seek within the corresponding period occurs this function initiates the clearing of the buffer and sets the correct buffering time.</p>"},{"title":"StreamProcessor~prepareOuterPeriodPlaybackSeeking","link":"<a href=\"StreamProcessor.html#~prepareOuterPeriodPlaybackSeeking\">prepareOuterPeriodPlaybackSeeking</a>","description":"<p>Seek outside of the current period.</p>"},{"title":"StreamProcessor~prepareQualityChange","link":"<a href=\"StreamProcessor.html#~prepareQualityChange\">prepareQualityChange</a>","description":"<p>The quality has changed which means we have switched to a different representation.<br>\nIf we want to aggressively replace existing parts in the buffer we need to make sure that the new quality is higher than the already buffered one.</p>"},{"title":"StreamProcessor~probeNextRequest","link":"<a href=\"StreamProcessor.html#~probeNextRequest\">probeNextRequest</a>","description":"<p>Probe the next request. This is used in the CMCD model to get information about the upcoming request. Note: No actual request is performed here.</p>"},{"title":"StreamProcessor~selectMediaInfo","link":"<a href=\"StreamProcessor.html#~selectMediaInfo\">selectMediaInfo</a>","description":"<p>Called once the StreamProcessor is initialized and when the track is switched. We only have one StreamProcessor per media type. So we need to adjust the mediaInfo once we switch/select a track.</p>"},{"title":"Stream~getStreamId","link":"<a href=\"Stream.html#~getStreamId\">getStreamId</a>","description":"<p>Returns the stream id</p>"},{"title":"Stream~initialize","link":"<a href=\"Stream.html#~initialize\">initialize</a>","description":"<p>Initialize the events</p>"},{"title":"Stream~initializeForTextWithMediaSource","link":"<a href=\"Stream.html#~initializeForTextWithMediaSource\">initializeForTextWithMediaSource</a>","description":"<p>We call this function if segments have been preloaded without a video element. Once the video element is attached MSE is available</p>"},{"title":"Stream~registerEvents","link":"<a href=\"Stream.html#~registerEvents\">registerEvents</a>","description":"<p>Register the streaming events</p>"},{"title":"Stream~registerProtectionEvents","link":"<a href=\"Stream.html#~registerProtectionEvents\">registerProtectionEvents</a>","description":"<p>Register the protection events</p>"},{"title":"Stream~setup","link":"<a href=\"Stream.html#~setup\">setup</a>","description":"<p>Setup the stream</p>"},{"title":"Stream~unRegisterEvents","link":"<a href=\"Stream.html#~unRegisterEvents\">unRegisterEvents</a>","description":"<p>Unregister the streaming events</p>"},{"title":"Stream~unRegisterProtectionEvents","link":"<a href=\"Stream.html#~unRegisterProtectionEvents\">unRegisterProtectionEvents</a>","description":"<p>Unregister the protection events</p>"},{"title":"TCPConnection#dest","link":"<a href=\"TCPConnection.html#dest\">dest</a>","description":"<p>IP Address of the interface over which the client is receiving the TCP data.</p>"},{"title":"TCPConnection#tclose","link":"<a href=\"TCPConnection.html#tclose\">tclose</a>","description":"<p>Real-Time | The time at which the connection was closed (sending or reception time of FIN or RST or close socket operation).</p>"},{"title":"TCPConnection#tconnect","link":"<a href=\"TCPConnection.html#tconnect\">tconnect</a>","description":"<p>Connect time in ms (time from sending the initial SYN to receiving the ACK or completion of the connect socket operation).</p>"},{"title":"TCPConnection#tcpid","link":"<a href=\"TCPConnection.html#tcpid\">tcpid</a>","description":"<p>Identifier of the TCP connection on which the HTTP request was sent.</p>"},{"title":"TCPConnection#topen","link":"<a href=\"TCPConnection.html#topen\">topen</a>","description":"<p>Real-Time | The time at which the connection was opened (sending time of the initial SYN or connect socket operation).</p>"},{"title":"TextController~addMediaInfosToBuffer","link":"<a href=\"TextController.html#~addMediaInfosToBuffer\">addMediaInfosToBuffer</a>","description":"<p>Adds the new mediaInfo objects to the textSourceBuffer.</p>"},{"title":"TextController~createTracks","link":"<a href=\"TextController.html#~createTracks\">createTracks</a>","description":"<p>All media infos have been added. Start creating the track objects</p>"},{"title":"TextSourceBuffer~_extractCea608Data","link":"<a href=\"TextSourceBuffer.html#~_extractCea608Data\">_extractCea608Data</a>","description":"<p>Extract CEA-608 data from a buffer of data.</p>"},{"title":"TextSourceBuffer~addMediaInfos","link":"<a href=\"TextSourceBuffer.html#~addMediaInfos\">addMediaInfos</a>","description":"<p>There might be media infos of different types. For instance text and fragmentedText.</p>"},{"title":"TimelineConverter~calcTimeShiftBufferWindow","link":"<a href=\"TimelineConverter.html#~calcTimeShiftBufferWindow\">calcTimeShiftBufferWindow</a>","description":"<p>Calculates the timeshiftbuffer range. This range might overlap multiple periods and is not limited to period boundaries. However, we make sure that the range is potentially covered by period.</p>"},{"title":"TimelineConverter~getClientReferenceTime","link":"<a href=\"TimelineConverter.html#~getClientReferenceTime\">getClientReferenceTime</a>","description":"<p>Returns a &quot;now&quot; reference time for the client to compare the availability time of a segment against.<br>\nTakes the client/server drift into account</p>"},{"title":"TimeSyncController~_attemptRecursiveSync","link":"<a href=\"TimeSyncController.html#~_attemptRecursiveSync\">_attemptRecursiveSync</a>","description":"<p>Sync against a timing source. This method is called recursively if the time sync for the first entry in timingSources fails.</p>"},{"title":"TimeSyncController~_directHandler","link":"<a href=\"TimeSyncController.html#~_directHandler\">_directHandler</a>","description":"<p>Direct handler</p>"},{"title":"TimeSyncController~_iso8601Decoder","link":"<a href=\"TimeSyncController.html#~_iso8601Decoder\">_iso8601Decoder</a>","description":"<p>Takes ISO 8601 timestamp and returns milliseconds since UNIX epoch</p>"},{"title":"TimeSyncController~_onAttemptBackgroundSync","link":"<a href=\"TimeSyncController.html#~_onAttemptBackgroundSync\">_onAttemptBackgroundSync</a>","description":"<p>Does a synchronization in the background in case the last offset should be verified or a 404 occurs</p>"},{"title":"TimeSyncController~_rfc1123Decoder","link":"<a href=\"TimeSyncController.html#~_rfc1123Decoder\">_rfc1123Decoder</a>","description":"<p>Takes RFC 1123 timestamp (which is same as ISO8601) and returns milliseconds since UNIX epoch</p>"},{"title":"TimeSyncController~_xsdatetimeDecoder","link":"<a href=\"TimeSyncController.html#~_xsdatetimeDecoder\">_xsdatetimeDecoder</a>","description":"<p>Try to use the built in parser, since xsdate is a constrained ISO8601 which is supported natively by Date.parse. if that fails, try a regex-based version used elsewhere in this application.</p>"},{"title":"TimeSyncController~attemptSync","link":"<a href=\"TimeSyncController.html#~attemptSync\">attemptSync</a>","description":"<p>Sync against a timing source. T</p>"},{"title":"TimeSyncController~initialize","link":"<a href=\"TimeSyncController.html#~initialize\">initialize</a>","description":"<p>Register the timing handler depending on the schemeIdUris. This method is called once when the StreamController is initialized</p>"},{"title":"TTMLParser~parse","link":"<a href=\"TTMLParser.html#~parse\">parse</a>","description":"<p>Parse the raw data and process it to return the HTML element representing the cue.<br>\nReturn the region to be processed and controlled (hide/show) by the caption controller.</p>"},{"title":"Utils.getRelativeUrl","link":"<a href=\"Utils.html#.getRelativeUrl\">getRelativeUrl</a>","description":"<p>Compares both urls and returns a relative url (target relative to original)</p>"},{"title":"Utils.stringHasProtocol","link":"<a href=\"Utils.html#.stringHasProtocol\">stringHasProtocol</a>","description":"<p>Checks for existence of &quot;http&quot; or &quot;https&quot; in a string</p>"},{"title":"XlinkController~resolveManifestOnLoad","link":"<a href=\"XlinkController.html#~resolveManifestOnLoad\">resolveManifestOnLoad</a>","description":"<p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>"}]}